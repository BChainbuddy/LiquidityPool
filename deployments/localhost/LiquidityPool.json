{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetOneAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetTwoAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "addressNotCorrect",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "amountTooBig",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "assetNotCorrect",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "initialLiquidityAlreadyProvided",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "needToCallExistingFunction",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "notEnoughGas",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "notEnoughTimePassed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "notEnoughTokens",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_assetOneAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_assetTwoAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_assetOneAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_assetTwoAmount",
          "type": "uint256"
        }
      ],
      "name": "liquidityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "priceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "yieldFarmed",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_assetOneAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_assetTwoAmount",
          "type": "uint256"
        }
      ],
      "name": "addInitialLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "addressBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "amountOfOppositeTokenNeeded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetOneAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetOnePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetTwoAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetTwoPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newSwapFee",
          "type": "uint256"
        }
      ],
      "name": "changeSwapFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getAssetBalace",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetOne",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAssetTwo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getLpTokenQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSwapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sellingAsset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getSwapQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYield",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "initialLiquidityProvidedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTime",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isTimeInitialLiquidity",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastYieldFarmedTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lpTokenQuantity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sellAssetOne",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sellAssetTwo",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swapFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "yieldTaken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6956a9af3273f5ee6f892dc7a5c549860f785ec9d948d26377523f9969997f1d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "2567996",
    "logsBloom": "0x
    "blockHash": "0x6ebf9731a25b05e62eefa69eb242a5d14b2cd40b33aba0732d09c3c55266dc62",
    "transactionHash": "0x6956a9af3273f5ee6f892dc7a5c549860f785ec9d948d26377523f9969997f1d",
    "logs": [],
    "blockNumber": 3,
    "cumulativeGasUsed": "2567996",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  ],
  "numDeployments": 1,
  "solcInputHash": "63a5286035b0087a3c241511a42e3b25",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetOneAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetTwoAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"addressNotCorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"amountTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"assetNotCorrect\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"initialLiquidityAlreadyProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"needToCallExistingFunction\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notEnoughGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notEnoughTimePassed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"notEnoughTokens\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assetOneAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assetTwoAmount\",\"type\":\"uint256\"}],\"name\":\"liquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assetOneAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assetTwoAmount\",\"type\":\"uint256\"}],\"name\":\"liquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"priceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"yieldFarmed\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_assetOneAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_assetTwoAmount\",\"type\":\"uint256\"}],\"name\":\"addInitialLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"amountOfOppositeTokenNeeded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetOneAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetOnePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetTwoAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetTwoPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newSwapFee\",\"type\":\"uint256\"}],\"name\":\"changeSwapFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getAssetBalace\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetOne\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAssetTwo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getLpTokenQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sellingAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getSwapQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYield\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"initialLiquidityProvidedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTimeInitialLiquidity\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastYieldFarmedTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lpTokenQuantity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellAssetOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sellAssetTwo\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"yieldTaken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"A decentralized liquidity pool contract for swapping assets and providing liquidity.\",\"kind\":\"dev\",\"methods\":{\"addInitialLiquidity(uint256,uint256)\":{\"details\":\"Function to add initial liquidity to the pool. Only callable by the owner.Needs the ERC-20 approval for transferFrom.\",\"params\":{\"_assetOneAmount\":\"The amount of the first asset to add.\",\"_assetTwoAmount\":\"The amount of the second asset to add.\"}},\"addLiquidity(address,address,uint256)\":{\"details\":\"Function to add additional liquidity to the pool.Needs the ERC-20 approval for transferFrom.\",\"params\":{\"_amount\":\"The amount of the first asset to add.\",\"_asset\":\"The address of the first asset.\",\"_secondAsset\":\"The address of the second asset.\"}},\"addressBalance()\":{\"details\":\"Function to get the current ETH balance of the contract.\",\"returns\":{\"_0\":\"The current ETH balance of the contract.\"}},\"amountOfOppositeTokenNeeded(address,uint256)\":{\"details\":\"Function to get the second part of the liquidity token pair needed for providing liquidity.\",\"params\":{\"_amount\":\"The amount of the asset.\",\"_asset\":\"The address of the asset.\"},\"returns\":{\"_0\":\"The quantity of the second asset needed for providing liquidity.\"}},\"assetOnePrice()\":{\"details\":\"Function to get the current price of the first asset in terms of the second asset.\",\"returns\":{\"_0\":\"The current price of the first asset * 10**18.\"}},\"assetTwoPrice()\":{\"details\":\"Function to get the current price of the second asset in terms of the first asset.\",\"returns\":{\"_0\":\"The current price of the second asset * 10**18.\"}},\"changeSwapFee(uint256)\":{\"details\":\"Function to change the swap fee. Only callable by the owner.\",\"params\":{\"newSwapFee\":\"The new swap fee to set.\"}},\"constructor\":{\"details\":\"Constructor to initialize the liquidity pool with two asset addresses.\",\"params\":{\"_assetOneAddress\":\"The address of the first asset.\",\"_assetTwoAddress\":\"The address of the second asset.\"}},\"getAssetBalace(address)\":{\"details\":\"Function to get the current balance of a given asset held by the contract.\",\"params\":{\"_address\":\"The address of the asset.\"},\"returns\":{\"_0\":\"The current balance of the asset.\"}},\"getAssetOne()\":{\"details\":\"Function to get the amount of the first asset held by the contract.\",\"returns\":{\"_0\":\"The current balance of the first asset.\"}},\"getAssetTwo()\":{\"details\":\"Function to get the amount of the second asset held by the contract.\",\"returns\":{\"_0\":\"The current balance of the second asset.\"}},\"getLiquidity()\":{\"details\":\"Function to get the total liquidity in the pool.\",\"returns\":{\"_0\":\"The total liquidity in the pool.\"}},\"getLpTokenQuantity(address)\":{\"details\":\"Function to get the quantity of LP tokens owned by a specific address.\",\"params\":{\"_address\":\"The address of the LP token holder.\"},\"returns\":{\"_0\":\"The quantity of LP tokens owned by the address.\"}},\"getSwapFee()\":{\"details\":\"Function to get the current swap fee percentage.\",\"returns\":{\"_0\":\"The current swap fee percentage.\"}},\"getSwapQuantity(address,uint256)\":{\"details\":\"Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\",\"params\":{\"_amount\":\"The amount of the first asset being sold.\",\"sellingAsset\":\"The address of the asset being sold.\"},\"returns\":{\"_0\":\"The quantity of the second asset that would be returned\"}},\"getYield()\":{\"details\":\"Function to allow users to claim their yield. Can be called once a day.\"},\"isTime()\":{\"details\":\"Function to check if enough time has passed for the user to claim yield.\",\"returns\":{\"_0\":\"Whether enough time has passed or not.\"}},\"isTimeInitialLiquidity()\":{\"details\":\"Function to check if enough time has passed since the initial liquidity was provided.\",\"returns\":{\"_0\":\"Whether enough time has passed or not.\"}},\"removeLiquidity(uint256)\":{\"details\":\"Function to remove liquidity from the pool.\",\"params\":{\"_amount\":\"The percentage of liquidity to withdraw(10 -> 10%).\"}},\"sellAssetOne(uint256)\":{\"details\":\"Function to sell the first asset and receive the second asset.\",\"params\":{\"_amount\":\"The amount of the first asset to sell.\"}},\"sellAssetTwo(uint256)\":{\"details\":\"Function to sell the second asset and receive the first asset.\",\"params\":{\"_amount\":\"The amount of the second asset to sell.\"}},\"yieldAmount()\":{\"details\":\"Function to get the current yield amount available in the pool.\",\"returns\":{\"_0\":\"The current yield amount.\"}}},\"title\":\"LiquidityPool\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LiquidityPool.sol\":\"LiquidityPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nerror assetNotCorrect();\\nerror notEnoughTokens();\\nerror notEnoughGas();\\nerror notEnoughTimePassed();\\nerror initialLiquidityAlreadyProvided();\\nerror addressNotCorrect();\\nerror amountTooBig();\\nerror needToCallExistingFunction();\\n\\n/**\\n * @title LiquidityPool\\n * @dev A decentralized liquidity pool contract for swapping assets and providing liquidity.\\n */\\ncontract LiquidityPool {\\n    // Events\\n    event priceChanged(address _asset, uint256 price);\\n    event liquidityAdded(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event liquidityRemoved(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event yieldFarmed(address indexed _address, uint256 _amount);\\n\\n    // Token Addresses\\n    address public assetOneAddress;\\n    address public assetTwoAddress;\\n\\n    // Liquidity and Yield (fees)\\n    uint256 public initialLiquidity;\\n    uint256 public liquidity;\\n    uint256 public yield;\\n    uint256 public swapFee;\\n    address public owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict functions only to the owner.\\n     */\\n    modifier onlyOwner() {\\n        msg.sender == owner;\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the liquidity pool with two asset addresses.\\n     * @param _assetOneAddress The address of the first asset.\\n     * @param _assetTwoAddress The address of the second asset.\\n     */\\n    constructor(address _assetOneAddress, address _assetTwoAddress) {\\n        assetOneAddress = _assetOneAddress;\\n        assetTwoAddress = _assetTwoAddress;\\n        owner = msg.sender;\\n        swapFee = 1000000000000000; // 0.001 ether\\n    }\\n\\n    /**\\n     * @dev Function to change the swap fee. Only callable by the owner.\\n     * @param newSwapFee The new swap fee to set.\\n     */\\n    function changeSwapFee(uint256 newSwapFee) public onlyOwner {\\n        swapFee = newSwapFee;\\n    }\\n\\n    // TRACK THE LP TOKEN QUANTITY, INITIAL LIQUIDITY\\n    mapping(address => uint256) public lpTokenQuantity;\\n\\n    /**\\n     * @dev Function to add initial liquidity to the pool. Only callable by the owner.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _assetOneAmount The amount of the first asset to add.\\n     * @param _assetTwoAmount The amount of the second asset to add.\\n     */\\n    function addInitialLiquidity(\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    ) public onlyOwner {\\n        if (initialLiquidityProvidedTime[owner] > 0) {\\n            revert initialLiquidityAlreadyProvided();\\n        }\\n        initialLiquidityProvidedTime[msg.sender] = block.timestamp;\\n\\n        // SENDS THE TOKENS TO THE LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(msg.sender, address(this), _assetOneAmount);\\n        IERC20(assetTwoAddress).transferFrom(msg.sender, address(this), _assetTwoAmount);\\n\\n        // SET THE INITIAL LIQUIDITY\\n        initialLiquidity = _assetOneAmount * _assetTwoAmount;\\n        liquidity = initialLiquidity;\\n\\n        // GIVE LP TOKENS TO THE INITIAL LIQUIDITY PROVIDER\\n        lpTokenQuantity[msg.sender] = initialLiquidity;\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(msg.sender, _assetOneAmount, _assetTwoAmount);\\n    }\\n\\n    /**\\n     * @dev Function to add additional liquidity to the pool.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _asset The address of the first asset.\\n     * @param _secondAsset The address of the second asset.\\n     * @param _amount The amount of the first asset to add.\\n     */\\n    function addLiquidity(\\n        address _asset,\\n        address _secondAsset,\\n        uint256 _amount\\n    ) public noReentrancy {\\n        // SET THE RATIO, require token balance provided in ERC20, reverted if too low\\n        IERC20(_secondAsset).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOfOppositeTokenNeeded(_asset, _amount)\\n        );\\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\\n\\n        // give lp tokens to new liquidity provider\\n        lpTokenQuantity[msg.sender] += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\\n        liquidity += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(msg.sender, amountOfOppositeTokenNeeded(_asset, _amount), _amount);\\n    }\\n\\n    /**\\n     * @dev Function to remove liquidity from the pool.\\n     * @param _amount The percentage of liquidity to withdraw(10 -> 10%).\\n     */\\n    function removeLiquidity(uint256 _amount) public noReentrancy {\\n        uint256 userLpTokens = lpTokenQuantity[msg.sender];\\n        uint256 percentageOfLiquidity = (userLpTokens * 1 ether) / liquidity; // How much user owns out of all Liquidity in percentage\\n        uint256 percentageOfUserLiquidity = (percentageOfLiquidity * _amount) / 100; // How much out of their liquidity they want to withdraw in percentage\\n        uint256 resultAssetOne = (percentageOfUserLiquidity * getAssetOne()) / 1 ether;\\n        uint256 resultAssetTwo = (percentageOfUserLiquidity * getAssetTwo()) / 1 ether;\\n        // condition for owner, because of the initial liquidity timer\\n        if (\\n            (msg.sender == owner) &&\\n            (isTimeInitialLiquidity() == false) &&\\n            //the owner has the ability to withdraw liquidity if it wasn't part of initial liquidity\\n            ((lpTokenQuantity[msg.sender] - (resultAssetOne * resultAssetTwo)) < initialLiquidity)\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        // check balance if it is high enough to continue, can't get reverted at transfer, it should have the balance but just in case\\n        if (\\n            IERC20(assetOneAddress).balanceOf(address(this)) < resultAssetOne ||\\n            IERC20(assetTwoAddress).balanceOf(address(this)) < resultAssetTwo\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        IERC20(assetOneAddress).transfer(msg.sender, resultAssetOne);\\n        IERC20(assetTwoAddress).transfer(msg.sender, resultAssetTwo);\\n\\n        // EMIT EVENT\\n        emit liquidityRemoved(msg.sender, resultAssetOne, resultAssetTwo);\\n    }\\n\\n    /**\\n     * @dev Function to sell the first asset and receive the second asset.\\n     * @param _amount The amount of the first asset to sell.\\n     */\\n    function sellAssetOne(uint256 _amount) public payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetOne()) {\\n            payable(msg.sender).transfer(msg.value);\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetTwo();\\n        uint256 assetOne = getAssetOne() + _amount;\\n        uint256 assetTwo = liquidity / assetOne;\\n        uint256 result = n - assetTwo;\\n        //SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(msg.sender, address(this), _amount);\\n        IERC20(assetTwoAddress).transfer(msg.sender, result);\\n        payable(msg.sender).transfer(unrequiredFee); // Sending back the unrequired fee\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to sell the second asset and receive the first asset.\\n     * @param _amount The amount of the second asset to sell.\\n     */\\n    function sellAssetTwo(uint256 _amount) public payable noReentrancy {\\n        //IF THE AMOUNT IS TOO BIG FOR LIQUIDITY POOL TO RETURN\\n        if (_amount >= getAssetTwo()) {\\n            payable(msg.sender).transfer(msg.value); // Transfer value back\\n            revert amountTooBig();\\n        }\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetOne();\\n        uint256 assetTwo = getAssetTwo() + _amount;\\n        uint256 assetOne = liquidity / assetTwo;\\n        uint256 result = n - assetOne;\\n        //GETTING THE ASSET FROM CALLER TO THE LIQUIDITY POOL AND SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetTwoAddress).transferFrom(msg.sender, address(this), _amount);\\n        IERC20(assetOneAddress).transfer(msg.sender, result);\\n        payable(msg.sender).transfer(unrequiredFee); // Sending back the unrequired fee\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n    }\\n\\n    /**\\n     * @dev Function to get the current balance of a given asset held by the contract.\\n     * @param _address The address of the asset.\\n     * @return The current balance of the asset.\\n     */\\n    function getAssetBalace(address _address) public view returns (uint256) {\\n        return IERC20(_address).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the first asset in terms of the second asset.\\n     * @return The current price of the first asset * 10**18.\\n     */\\n    function assetOnePrice() public view returns (uint256) {\\n        return (getAssetTwo() * 1 ether) / getAssetOne();\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the second asset in terms of the first asset.\\n     * @return The current price of the second asset * 10**18.\\n     */\\n    function assetTwoPrice() public view returns (uint256) {\\n        return (getAssetOne() * 1 ether) / getAssetTwo();\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the first asset held by the contract.\\n     * @return The current balance of the first asset.\\n     */\\n    function getAssetOne() public view returns (uint256) {\\n        return IERC20(assetOneAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the second asset held by the contract.\\n     * @return The current balance of the second asset.\\n     */\\n    function getAssetTwo() public view returns (uint256) {\\n        return IERC20(assetTwoAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of LP tokens owned by a specific address.\\n     * @param _address The address of the LP token holder.\\n     * @return The quantity of LP tokens owned by the address.\\n     */\\n    function getLpTokenQuantity(address _address) public view returns (uint256) {\\n        if (msg.sender != owner && _address == msg.sender) {\\n            revert addressNotCorrect();\\n        }\\n        return lpTokenQuantity[_address];\\n    }\\n\\n    /**\\n     * @dev Function to get the total liquidity in the pool.\\n     * @return The total liquidity in the pool.\\n     */\\n    function getLiquidity() public view returns (uint256) {\\n        return liquidity;\\n    }\\n\\n    /**\\n     * @dev Function to get the current swap fee percentage.\\n     * @return The current swap fee percentage.\\n     */\\n    function getSwapFee() public view returns (uint256) {\\n        return swapFee;\\n    }\\n\\n    /**\\n     * @dev Function to get the current ETH balance of the contract.\\n     * @return The current ETH balance of the contract.\\n     */\\n    function addressBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\\n     * @param sellingAsset The address of the asset being sold.\\n     * @param _amount The amount of the first asset being sold.\\n     * @return The quantity of the second asset that would be returned\\n     */\\n    function getSwapQuantity(address sellingAsset, uint256 _amount) public view returns (uint256) {\\n        if (sellingAsset == assetOneAddress) {\\n            uint256 newAssetOne = getAssetOne() + _amount;\\n            uint256 newAssetTwo = liquidity / newAssetOne;\\n            return getAssetTwo() - newAssetTwo;\\n        } else if (sellingAsset == assetTwoAddress) {\\n            uint256 newAssetTwo = getAssetTwo() + _amount;\\n            uint256 newAssetOne = liquidity / newAssetTwo;\\n            return getAssetOne() - newAssetOne;\\n        } else {\\n            revert assetNotCorrect();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get the second part of the liquidity token pair needed for providing liquidity.\\n     * @param _asset The address of the asset.\\n     * @param _amount The amount of the asset.\\n     * @return The quantity of the second asset needed for providing liquidity.\\n     */\\n    function amountOfOppositeTokenNeeded(\\n        address _asset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        uint256 ratio;\\n        if (_asset == assetOneAddress) {\\n            ratio = (getAssetTwo() * 1 ether) / getAssetOne();\\n        } else {\\n            ratio = (getAssetOne() * 1 ether) / getAssetTwo();\\n        }\\n        uint256 amountNeeded = (_amount * ratio) / 1 ether;\\n        return amountNeeded;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    // Yield Farming and Time Locks\\n\\n    // Daily yield tracking\\n    mapping(address => uint256) public yieldTaken;\\n\\n    /**\\n     * @dev Function to get the current yield amount available in the pool.\\n     * @return The current yield amount.\\n     */\\n    function yieldAmount() public view returns (uint256) {\\n        return yield;\\n    }\\n\\n    /**\\n     * @dev Function to allow users to claim their yield. Can be called once a day.\\n     */\\n    function getYield() public {\\n        if (isTime() == false) {\\n            revert notEnoughTimePassed();\\n        }\\n        lastYieldFarmedTime[msg.sender] = block.timestamp; // Reentrancy guard\\n        uint256 yieldSoFar = yieldTaken[msg.sender];\\n        uint256 userLiquidity = (lpTokenQuantity[msg.sender] * 100) / liquidity;\\n        uint256 availableYield = ((yield - ((yieldSoFar * 100) / userLiquidity)) * userLiquidity) /\\n            100;\\n        if (availableYield > address(this).balance) {\\n            revert notEnoughTokens(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[msg.sender] += availableYield;\\n        payable(msg.sender).transfer(availableYield);\\n\\n        // EMIT EVENT\\n        emit yieldFarmed(msg.sender, availableYield);\\n    }\\n\\n    // Timestamp mapping for yield farming\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n    mapping(address => uint256) public initialLiquidityProvidedTime;\\n\\n    /**\\n     * @dev Function to check if enough time has passed for the user to claim yield.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTime() public view returns (bool) {\\n        lastYieldFarmedTime[msg.sender];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[msg.sender] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed since the initial liquidity was provided.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTimeInitialLiquidity() public view returns (bool) {\\n        if (block.timestamp > (initialLiquidityProvidedTime[msg.sender] + 365 days)) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    fallback() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    receive() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0xf3a7ef10074d6c26bbc9e4b4fc4779ee5b856d1ede186c1a58f2cdc35f8c8d0c\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002dae38038062002dae833981810160405281019062000037919062000126565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555066038d7ea4c680006005819055505050620001c0565b6000815190506200012081620001a6565b92915050565b6000806040838503121562000140576200013f620001a1565b5b600062000150858286016200010f565b925050602062000163858286016200010f565b9150509250929050565b60006200017a8262000181565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b620001b1816200016d565b8114620001bd57600080fd5b50565b612bde80620001d06000396000f3fe6080604052600436106101e75760003560e01c80638da5cb5b11610102578063aa03f2ed11610095578063e35ba8ab11610064578063e35ba8ab1461074a578063e4a7672614610775578063f318e5571461079e578063ffebfc8c146107c95761021e565b8063aa03f2ed146106ad578063ce5efee3146106d8578063d4cadf6814610703578063dc1716241461072e5761021e565b8063a04f6639116100d1578063a04f663914610603578063a40f4fa11461062e578063a875480314610657578063a97533b8146106825761021e565b80638da5cb5b1461053557806395cc4c5e146105605780639a61c36a1461059d5780639c8f9f23146105da5761021e565b806340702adc1161017a578063696c613111610149578063696c61311461047b5780637c262871146104a457806381bace7d146104bb5780638477a634146104f85761021e565b806340702adc146103de5780634257dc4c146104095780634d2d757c1461042557806354cf2aeb146104505761021e565b806328593984116101b6578063285939841461030e57806328da1aef146103395780632d4ce66914610376578063405eae91146103b35761021e565b80630910a51014610250578063131a6f011461027b5780631a686502146102a657806324aabb92146102d15761021e565b3661021e576040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561025c57600080fd5b50610265610806565b6040516102729190612925565b60405180910390f35b34801561028757600080fd5b50610290610810565b60405161029d9190612925565b60405180910390f35b3480156102b257600080fd5b506102bb6108c2565b6040516102c89190612925565b60405180910390f35b3480156102dd57600080fd5b506102f860048036038101906102f39190612698565b6108c8565b6040516103059190612925565b60405180910390f35b34801561031a57600080fd5b506103236108e0565b6040516103309190612925565b60405180910390f35b34801561034557600080fd5b50610360600480360381019061035b9190612718565b6108e6565b60405161036d9190612925565b60405180910390f35b34801561038257600080fd5b5061039d60048036038101906103989190612698565b610a55565b6040516103aa9190612925565b60405180910390f35b3480156103bf57600080fd5b506103c8610ae7565b6040516103d591906128ea565b60405180910390f35b3480156103ea57600080fd5b506103f3610b96565b6040516104009190612925565b60405180910390f35b610423600480360381019061041e9190612785565b610b9c565b005b34801561043157600080fd5b5061043a610fc8565b60405161044791906128ea565b60405180910390f35b34801561045c57600080fd5b50610465611031565b6040516104729190612925565b60405180910390f35b34801561048757600080fd5b506104a2600480360381019061049d9190612785565b611037565b005b3480156104b057600080fd5b506104b961104f565b005b3480156104c757600080fd5b506104e260048036038101906104dd9190612698565b6112e4565b6040516104ef9190612925565b60405180910390f35b34801561050457600080fd5b5061051f600480360381019061051a9190612698565b6113ed565b60405161052c9190612925565b60405180910390f35b34801561054157600080fd5b5061054a611405565b604051610557919061286f565b60405180910390f35b34801561056c57600080fd5b5061058760048036038101906105829190612718565b61142b565b6040516105949190612925565b60405180910390f35b3480156105a957600080fd5b506105c460048036038101906105bf9190612698565b611514565b6040516105d19190612925565b60405180910390f35b3480156105e657600080fd5b5061060160048036038101906105fc9190612785565b61152c565b005b34801561060f57600080fd5b50610618611ad8565b6040516106259190612925565b60405180910390f35b34801561063a57600080fd5b50610655600480360381019061065091906127df565b611ae2565b005b34801561066357600080fd5b5061066c611de7565b604051610679919061286f565b60405180910390f35b34801561068e57600080fd5b50610697611e0d565b6040516106a49190612925565b60405180910390f35b3480156106b957600080fd5b506106c2611e41565b6040516106cf9190612925565b60405180910390f35b3480156106e457600080fd5b506106ed611ef2565b6040516106fa919061286f565b60405180910390f35b34801561070f57600080fd5b50610718611f16565b6040516107259190612925565b60405180910390f35b61074860048036038101906107439190612785565b611f20565b005b34801561075657600080fd5b5061075f61234c565b60405161076c9190612925565b60405180910390f35b34801561078157600080fd5b5061079c600480360381019061079791906126c5565b612380565b005b3480156107aa57600080fd5b506107b3612624565b6040516107c09190612925565b60405180910390f35b3480156107d557600080fd5b506107f060048036038101906107eb9190612698565b61262c565b6040516107fd9190612925565b60405180910390f35b6000600354905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161086d919061286f565b60206040518083038186803b15801561088557600080fd5b505afa158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd91906127b2565b905090565b60035481565b60076020528060005260406000206000915090505481565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561098257600082610948611e41565b610952919061297a565b905060008160035461096491906129d0565b90508061096f610810565b6109799190612a5b565b92505050610a4f565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a1d576000826109e3610810565b6109ed919061297a565b90506000816003546109ff91906129d0565b905080610a0a611e41565b610a149190612a5b565b92505050610a4f565b6040517fd526485500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a90919061286f565b60206040518083038186803b158015610aa857600080fd5b505afa158015610abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae091906127b2565b9050919050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205060004290508062015180600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610b7d919061297a565b1015610b8d576001915050610b93565b60009150505b90565b60025481565b600660149054906101000a900460ff1615610bec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be390612905565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550610c0f611e41565b8110610c8e573373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015610c5b573d6000803e3d6000fd5b506040517fe45bfdc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600554341015610cca576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460046000828254610cde919061297a565b92505081905550600060055434610cf59190612a5b565b90506000610d01610810565b9050600083610d0e611e41565b610d18919061297a565b9050600081600354610d2a91906129d0565b905060008184610d3a9190612a5b565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b8152600401610d999392919061288a565b602060405180830381600087803b158015610db357600080fd5b505af1158015610dc7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610deb9190612758565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610e499291906128c1565b602060405180830381600087803b158015610e6357600080fd5b505af1158015610e77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e9b9190612758565b503373ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015610ee2573d6000803e3d6000fd5b507f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f2d611e0d565b604051610f3b9291906128c1565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f8f61234c565b604051610f9d9291906128c1565b60405180910390a150505050506000600660146101000a81548160ff02191690831515021790555050565b60006301e13380600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054611019919061297a565b421115611029576001905061102e565b600090505b90565b60055481565b600660009054906101000a9050508060058190555050565b6000151561105b610ae7565b15151415611095576040517ffdbfe33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006003546064600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461116e9190612a01565b61117891906129d0565b905060006064828360648661118d9190612a01565b61119791906129d0565b6004546111a49190612a5b565b6111ae9190612a01565b6111b891906129d0565b9050478111156111f4576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611243919061297a565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015611290573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fbf630ce062dbeaeb6c23a21390208b25de2ac16fb8502eab6054a70d9e34b8ec826040516112d79190612925565b60405180910390a2505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561136f57503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156113a6576040517f2ffae41300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a6020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156114b65761148a611e41565b670de0b6b3a764000061149b610810565b6114a59190612a01565b6114af91906129d0565b90506114e6565b6114be610810565b670de0b6b3a76400006114cf611e41565b6114d99190612a01565b6114e391906129d0565b90505b6000670de0b6b3a764000082856114fd9190612a01565b61150791906129d0565b9050809250505092915050565b60086020528060005260406000206000915090505481565b600660149054906101000a900460ff161561157c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157390612905565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600354670de0b6b3a7640000836115f49190612a01565b6115fe91906129d0565b90506000606484836116109190612a01565b61161a91906129d0565b90506000670de0b6b3a764000061162f611e41565b8361163a9190612a01565b61164491906129d0565b90506000670de0b6b3a7640000611659610810565b846116649190612a01565b61166e91906129d0565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156116d85750600015156116d4610fc8565b1515145b801561173a575060025481836116ee9190612a01565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546117389190612a5b565b105b15611771576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117cb919061286f565b60206040518083038186803b1580156117e357600080fd5b505afa1580156117f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061181b91906127b2565b10806118d0575080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161187e919061286f565b60206040518083038186803b15801561189657600080fd5b505afa1580156118aa573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118ce91906127b2565b105b15611907576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b81526004016119629291906128c1565b602060405180830381600087803b15801561197c57600080fd5b505af1158015611990573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119b49190612758565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611a129291906128c1565b602060405180830381600087803b158015611a2c57600080fd5b505af1158015611a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a649190612758565b503373ffffffffffffffffffffffffffffffffffffffff167fbad053f5b243c76f17611a28d4554167bd09e3491be13032dd4af620e8e228728383604051611aad929190612940565b60405180910390a250505050506000600660146101000a81548160ff02191690831515021790555050565b6000600454905090565b600660009054906101000a9050506000600a6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611b8c576040517f17ebf42200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611c2d9392919061288a565b602060405180830381600087803b158015611c4757600080fd5b505af1158015611c5b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c7f9190612758565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611cdf9392919061288a565b602060405180830381600087803b158015611cf957600080fd5b505af1158015611d0d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d319190612758565b508082611d3e9190612a01565b600281905550600254600381905550600254600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6148383604051611ddb929190612940565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611e17611e41565b670de0b6b3a7640000611e28610810565b611e329190612a01565b611e3c91906129d0565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611e9d919061286f565b60206040518083038186803b158015611eb557600080fd5b505afa158015611ec9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eed91906127b2565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554905090565b600660149054906101000a900460ff1615611f70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f6790612905565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550611f93610810565b8110612012573373ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015611fdf573d6000803e3d6000fd5b506040517fe45bfdc700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055434101561204e576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460046000828254612062919061297a565b925050819055506000600554346120799190612a5b565b90506000612085611e41565b9050600083612092610810565b61209c919061297a565b90506000816003546120ae91906129d0565b9050600081846120be9190612a5b565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b815260040161211f9392919061288a565b602060405180830381600087803b15801561213957600080fd5b505af115801561214d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121719190612758565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016121cd9291906128c1565b602060405180830381600087803b1580156121e757600080fd5b505af11580156121fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061221f9190612758565b503373ffffffffffffffffffffffffffffffffffffffff166108fc869081150290604051600060405180830381858888f19350505050158015612266573d6000803e3d6000fd5b507f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff166122b1611e0d565b6040516122bf9291906128c1565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661231361234c565b6040516123219291906128c1565b60405180910390a150505050506000600660146101000a81548160ff02191690831515021790555050565b6000612356610810565b670de0b6b3a7640000612367611e41565b6123719190612a01565b61237b91906129d0565b905090565b600660149054906101000a900460ff16156123d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c790612905565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330612413878661142b565b6040518463ffffffff1660e01b81526004016124319392919061288a565b602060405180830381600087803b15801561244b57600080fd5b505af115801561245f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124839190612758565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016124c19392919061288a565b602060405180830381600087803b1580156124db57600080fd5b505af11580156124ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125139190612758565b5061251e838261142b565b816125299190612a01565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612577919061297a565b92505081905550612588838261142b565b816125939190612a01565b600360008282546125a4919061297a565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6146125ed858461142b565b836040516125fc929190612940565b60405180910390a26000600660146101000a81548160ff021916908315150217905550505050565b600047905090565b60096020528060005260406000206000915090505481565b60008135905061265381612b63565b92915050565b60008151905061266881612b7a565b92915050565b60008135905061267d81612b91565b92915050565b60008151905061269281612b91565b92915050565b6000602082840312156126ae576126ad612b35565b5b60006126bc84828501612644565b91505092915050565b6000806000606084860312156126de576126dd612b35565b5b60006126ec86828701612644565b93505060206126fd86828701612644565b925050604061270e8682870161266e565b9150509250925092565b6000806040838503121561272f5761272e612b35565b5b600061273d85828601612644565b925050602061274e8582860161266e565b9150509250929050565b60006020828403121561276e5761276d612b35565b5b600061277c84828501612659565b91505092915050565b60006020828403121561279b5761279a612b35565b5b60006127a98482850161266e565b91505092915050565b6000602082840312156127c8576127c7612b35565b5b60006127d684828501612683565b91505092915050565b600080604083850312156127f6576127f5612b35565b5b60006128048582860161266e565b92505060206128158582860161266e565b9150509250929050565b61282881612a8f565b82525050565b61283781612aa1565b82525050565b600061284a600e83612969565b915061285582612b3a565b602082019050919050565b61286981612acd565b82525050565b6000602082019050612884600083018461281f565b92915050565b600060608201905061289f600083018661281f565b6128ac602083018561281f565b6128b96040830184612860565b949350505050565b60006040820190506128d6600083018561281f565b6128e36020830184612860565b9392505050565b60006020820190506128ff600083018461282e565b92915050565b6000602082019050818103600083015261291e8161283d565b9050919050565b600060208201905061293a6000830184612860565b92915050565b60006040820190506129556000830185612860565b6129626020830184612860565b9392505050565b600082825260208201905092915050565b600061298582612acd565b915061299083612acd565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156129c5576129c4612ad7565b5b828201905092915050565b60006129db82612acd565b91506129e683612acd565b9250826129f6576129f5612b06565b5b828204905092915050565b6000612a0c82612acd565b9150612a1783612acd565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612a5057612a4f612ad7565b5b828202905092915050565b6000612a6682612acd565b9150612a7183612acd565b925082821015612a8457612a83612ad7565b5b828203905092915050565b6000612a9a82612aad565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600080fd5b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b612b6c81612a8f565b8114612b7757600080fd5b50565b612b8381612aa1565b8114612b8e57600080fd5b50565b612b9a81612acd565b8114612ba557600080fd5b5056fea264697066735822122082acef2094a82ef6b39a1ca28edf6abf2f8b57bc7c51c338be53db7fe7b3b90064736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "A decentralized liquidity pool contract for swapping assets and providing liquidity.",
    "kind": "dev",
    "methods": {
      "addInitialLiquidity(uint256,uint256)": {
        "details": "Function to add initial liquidity to the pool. Only callable by the owner.Needs the ERC-20 approval for transferFrom.",
        "params": {
          "_assetOneAmount": "The amount of the first asset to add.",
          "_assetTwoAmount": "The amount of the second asset to add."
        }
      },
      "addLiquidity(address,address,uint256)": {
        "details": "Function to add additional liquidity to the pool.Needs the ERC-20 approval for transferFrom.",
        "params": {
          "_amount": "The amount of the first asset to add.",
          "_asset": "The address of the first asset.",
          "_secondAsset": "The address of the second asset."
        }
      },
      "addressBalance()": {
        "details": "Function to get the current ETH balance of the contract.",
        "returns": {
          "_0": "The current ETH balance of the contract."
        }
      },
      "amountOfOppositeTokenNeeded(address,uint256)": {
        "details": "Function to get the second part of the liquidity token pair needed for providing liquidity.",
        "params": {
          "_amount": "The amount of the asset.",
          "_asset": "The address of the asset."
        },
        "returns": {
          "_0": "The quantity of the second asset needed for providing liquidity."
        }
      },
      "assetOnePrice()": {
        "details": "Function to get the current price of the first asset in terms of the second asset.",
        "returns": {
          "_0": "The current price of the first asset * 10**18."
        }
      },
      "assetTwoPrice()": {
        "details": "Function to get the current price of the second asset in terms of the first asset.",
        "returns": {
          "_0": "The current price of the second asset * 10**18."
        }
      },
      "changeSwapFee(uint256)": {
        "details": "Function to change the swap fee. Only callable by the owner.",
        "params": {
          "newSwapFee": "The new swap fee to set."
        }
      },
      "constructor": {
        "details": "Constructor to initialize the liquidity pool with two asset addresses.",
        "params": {
          "_assetOneAddress": "The address of the first asset.",
          "_assetTwoAddress": "The address of the second asset."
        }
      },
      "getAssetBalace(address)": {
        "details": "Function to get the current balance of a given asset held by the contract.",
        "params": {
          "_address": "The address of the asset."
        },
        "returns": {
          "_0": "The current balance of the asset."
        }
      },
      "getAssetOne()": {
        "details": "Function to get the amount of the first asset held by the contract.",
        "returns": {
          "_0": "The current balance of the first asset."
        }
      },
      "getAssetTwo()": {
        "details": "Function to get the amount of the second asset held by the contract.",
        "returns": {
          "_0": "The current balance of the second asset."
        }
      },
      "getLiquidity()": {
        "details": "Function to get the total liquidity in the pool.",
        "returns": {
          "_0": "The total liquidity in the pool."
        }
      },
      "getLpTokenQuantity(address)": {
        "details": "Function to get the quantity of LP tokens owned by a specific address.",
        "params": {
          "_address": "The address of the LP token holder."
        },
        "returns": {
          "_0": "The quantity of LP tokens owned by the address."
        }
      },
      "getSwapFee()": {
        "details": "Function to get the current swap fee percentage.",
        "returns": {
          "_0": "The current swap fee percentage."
        }
      },
      "getSwapQuantity(address,uint256)": {
        "details": "Function to get the quantity of the second asset that would be returned for a given amount of the first asset.",
        "params": {
          "_amount": "The amount of the first asset being sold.",
          "sellingAsset": "The address of the asset being sold."
        },
        "returns": {
          "_0": "The quantity of the second asset that would be returned"
        }
      },
      "getYield()": {
        "details": "Function to allow users to claim their yield. Can be called once a day."
      },
      "isTime()": {
        "details": "Function to check if enough time has passed for the user to claim yield.",
        "returns": {
          "_0": "Whether enough time has passed or not."
        }
      },
      "isTimeInitialLiquidity()": {
        "details": "Function to check if enough time has passed since the initial liquidity was provided.",
        "returns": {
          "_0": "Whether enough time has passed or not."
        }
      },
      "removeLiquidity(uint256)": {
        "details": "Function to remove liquidity from the pool.",
        "params": {
          "_amount": "The percentage of liquidity to withdraw(10 -> 10%)."
        }
      },
      "sellAssetOne(uint256)": {
        "details": "Function to sell the first asset and receive the second asset.",
        "params": {
          "_amount": "The amount of the first asset to sell."
        }
      },
      "sellAssetTwo(uint256)": {
        "details": "Function to sell the second asset and receive the first asset.",
        "params": {
          "_amount": "The amount of the second asset to sell."
        }
      },
      "yieldAmount()": {
        "details": "Function to get the current yield amount available in the pool.",
        "returns": {
          "_0": "The current yield amount."
        }
      }
    },
    "title": "LiquidityPool",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "assetOneAddress",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 132,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "assetTwoAddress",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 134,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "initialLiquidity",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 136,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "liquidity",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 138,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "yield",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 140,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "swapFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 142,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 144,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "locked",
        "offset": 20,
        "slot": "6",
        "type": "t_bool"
      },
      {
        "astId": 217,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "lpTokenQuantity",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 999,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "yieldTaken",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1105,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "lastYieldFarmedTime",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1109,
        "contract": "contracts/LiquidityPool.sol:LiquidityPool",
        "label": "initialLiquidityProvidedTime",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}