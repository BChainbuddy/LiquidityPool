{
  "address": "0x8e6cEC46BeB6DAf0e0D2EC689425016593Cf38C7",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "PoolTracker_pairAlreadyExists",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract LiquidityPool",
          "name": "pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetOne",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetTwo",
          "type": "address"
        }
      ],
      "name": "poolCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "name": "addRoutingAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetOneAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetTwoAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOne",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountTwo",
          "type": "uint256"
        }
      ],
      "name": "createPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token2",
          "type": "address"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getPoolPairs",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        }
      ],
      "name": "getPoolPairsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPools",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoutingAddressesLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pairToPool",
      "outputs": [
        {
          "internalType": "contract LiquidityPool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolPairs",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "routingAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "priceFeed",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenList",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xda8a0511bc8cc8ea0653559fb359288efb4ad0d5784571559f16d94f39f36da7",
  "receipt": {
    "to": null,
    "from": "0x540467feca43907A701311D0721df481D1f9e238",
    "contractAddress": "0x8e6cEC46BeB6DAf0e0D2EC689425016593Cf38C7",
    "transactionIndex": 54,
    "gasUsed": "4193957",
    "logsBloom": "0x
    "blockHash": "0xfb2feeb2242d966402741ade28f9a0593fcb91e32482bd38b54e41d2cda54b09",
    "transactionHash": "0xda8a0511bc8cc8ea0653559fb359288efb4ad0d5784571559f16d94f39f36da7",
    "logs": [],
    "blockNumber": 5791547,
    "cumulativeGasUsed": "11467816",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "482776f1951556568fa4c22584320e04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"PoolTracker_pairAlreadyExists\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract LiquidityPool\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOne\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetTwo\",\"type\":\"address\"}],\"name\":\"poolCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"name\":\"addRoutingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetOneAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetTwoAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOne\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountTwo\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token2\",\"type\":\"address\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPoolPairs\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"getPoolPairsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPools\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoutingAddressesLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pairToPool\",\"outputs\":[{\"internalType\":\"contract LiquidityPool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolPairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"routingAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem. Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions. Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.\",\"kind\":\"dev\",\"methods\":{\"addRoutingAddress(address,address)\":{\"details\":\"Allows the contract owner to add or update the routing address for a token. This is used for token swaps and price feed lookups.\",\"params\":{\"priceFeed\":\"The Chainlink price feed address for the token.\",\"tokenAddress\":\"The token for which to set the routing.\"}},\"createPool(address,address,uint256,uint256)\":{\"details\":\"Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings. Emits a PoolCreated event upon successful creation. Requirements: - The token pair must not already have an existing pool. - The caller must have approved the contract to spend the necessary token amounts.\",\"params\":{\"_assetOneAddress\":\"The address of the first token in the pair.\",\"_assetTwoAddress\":\"The address of the second token in the pair.\",\"amountOne\":\"The amount of the first token to add to the pool.\",\"amountTwo\":\"The amount of the second token to add to the pool.\"}},\"exists(address,address)\":{\"details\":\"Checks if a liquidity pool exists for a given pair of tokens.\",\"params\":{\"token1\":\"The address of the first token.\",\"token2\":\"The address of the second token.\"},\"returns\":{\"_0\":\"bool Returns true if the pool exists, false otherwise.\"}},\"getPoolPairsLength(address)\":{\"details\":\"Returns length or poolPairs array\",\"returns\":{\"_0\":\"uint256 Returns length.\"}},\"getPools()\":{\"details\":\"Retrieve pool addresses\",\"returns\":{\"_0\":\"array Returns pools array\"}},\"getRoutingAddressesLength()\":{\"details\":\"Returns length or routingAddresses array\",\"returns\":{\"_0\":\"uint256 Returns length.\"}},\"tokenList()\":{\"details\":\"Returns all array of all tradable tokens on the platform\",\"returns\":{\"_0\":\"array Returns tokens array.\"}}},\"title\":\"PoolTracker\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PoolTracker.sol\":\"PoolTracker\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xfe4e8bb4861bb3860ba890ab91a3b818ec66e5a8f544fb608cfcb73f433472cd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/LiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nerror assetNotCorrect();\\nerror notEnoughTokens();\\nerror notEnoughGas();\\nerror notEnoughTimePassed();\\nerror initialLiquidityAlreadyProvided();\\nerror addressNotCorrect();\\nerror amountTooBig();\\nerror needToCallExistingFunction();\\n\\n/**\\n * @title LiquidityPool\\n * @dev A decentralized liquidity pool contract for swapping assets and providing liquidity.\\n */\\ncontract LiquidityPool {\\n    // Events\\n    event priceChanged(address _asset, uint256 price);\\n    event liquidityAdded(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event liquidityRemoved(\\n        address indexed _address,\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    );\\n    event yieldFarmed(address indexed _address, uint256 _amount);\\n\\n    // Token Addresses\\n    address public assetOneAddress;\\n    address public assetTwoAddress;\\n\\n    // Liquidity and Yield (fees)\\n    uint256 public initialLiquidity;\\n    uint256 public liquidity;\\n    uint256 public yield;\\n    uint256 public swapFee;\\n    address public owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to restrict functions only to the owner.\\n     */\\n    modifier onlyOwner() {\\n        msg.sender == owner;\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the liquidity pool with two asset addresses.\\n     * @param _assetOneAddress The address of the first asset.\\n     * @param _assetTwoAddress The address of the second asset.\\n     */\\n    constructor(address _assetOneAddress, address _assetTwoAddress) {\\n        assetOneAddress = _assetOneAddress;\\n        assetTwoAddress = _assetTwoAddress;\\n        owner = msg.sender;\\n        swapFee = 1000000000000000; // 0.001 ether\\n    }\\n\\n    /**\\n     * @dev Function to change the swap fee. Only callable by the owner.\\n     * @param newSwapFee The new swap fee to set.\\n     */\\n    function changeSwapFee(uint256 newSwapFee) public onlyOwner {\\n        swapFee = newSwapFee;\\n    }\\n\\n    // TRACK THE LP TOKEN QUANTITY, INITIAL LIQUIDITY\\n    mapping(address => uint256) public lpTokenQuantity;\\n\\n    /**\\n     * @dev Function to add initial liquidity to the pool. Only callable by the owner.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _assetOneAmount The amount of the first asset to add.\\n     * @param _assetTwoAmount The amount of the second asset to add.\\n     */\\n    function addInitialLiquidity(\\n        uint256 _assetOneAmount,\\n        uint256 _assetTwoAmount\\n    ) public onlyOwner {\\n        if (initialLiquidityProvidedTime[owner] > 0) {\\n            revert initialLiquidityAlreadyProvided();\\n        }\\n        initialLiquidityProvidedTime[msg.sender] = block.timestamp;\\n\\n        // SENDS THE TOKENS TO THE LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(msg.sender, address(this), _assetOneAmount);\\n        IERC20(assetTwoAddress).transferFrom(msg.sender, address(this), _assetTwoAmount);\\n\\n        // SET THE INITIAL LIQUIDITY\\n        initialLiquidity = _assetOneAmount * _assetTwoAmount;\\n        liquidity = initialLiquidity;\\n\\n        // GIVE LP TOKENS TO THE INITIAL LIQUIDITY PROVIDER\\n        lpTokenQuantity[msg.sender] = initialLiquidity;\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(msg.sender, _assetOneAmount, _assetTwoAmount);\\n    }\\n\\n    /**\\n     * @dev Function to add additional liquidity to the pool.\\n     * @dev Needs the ERC-20 approval for transferFrom.\\n     * @param _asset The address of the first asset.\\n     * @param _secondAsset The address of the second asset.\\n     * @param _amount The amount of the first asset to add.\\n     */\\n    function addLiquidity(\\n        address _asset,\\n        address _secondAsset,\\n        uint256 _amount\\n    ) public noReentrancy {\\n        // SET THE RATIO, require token balance provided in ERC20, reverted if too low\\n        IERC20(_secondAsset).transferFrom(\\n            msg.sender,\\n            address(this),\\n            amountOfOppositeTokenNeeded(_asset, _amount)\\n        );\\n        IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\\n\\n        // give lp tokens to new liquidity provider\\n        lpTokenQuantity[msg.sender] += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\\n        liquidity += (_amount * amountOfOppositeTokenNeeded(_asset, _amount));\\n\\n        // EMIT EVENT\\n        emit liquidityAdded(msg.sender, amountOfOppositeTokenNeeded(_asset, _amount), _amount);\\n    }\\n\\n    /**\\n     * @dev Function to remove liquidity from the pool.\\n     * @param _amount The percentage of liquidity to withdraw(10 -> 10%).\\n     */\\n    function removeLiquidity(uint256 _amount) public noReentrancy {\\n        uint256 userLpTokens = lpTokenQuantity[msg.sender];\\n        uint256 percentageOfLiquidity = (userLpTokens * 1 ether) / liquidity; // How much user owns out of all Liquidity in percentage\\n        uint256 percentageOfUserLiquidity = (percentageOfLiquidity * _amount) / 100; // How much out of their liquidity they want to withdraw in percentage\\n        uint256 resultAssetOne = (percentageOfUserLiquidity * getAssetOne()) / 1 ether;\\n        uint256 resultAssetTwo = (percentageOfUserLiquidity * getAssetTwo()) / 1 ether;\\n        // condition for owner, because of the initial liquidity timer\\n        if (\\n            (msg.sender == owner) &&\\n            (isTimeInitialLiquidity() == false) &&\\n            //the owner has the ability to withdraw liquidity if it wasn't part of initial liquidity\\n            ((lpTokenQuantity[msg.sender] - (resultAssetOne * resultAssetTwo)) < initialLiquidity)\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        // check balance if it is high enough to continue, can't get reverted at transfer, it should have the balance but just in case\\n        if (\\n            IERC20(assetOneAddress).balanceOf(address(this)) < resultAssetOne ||\\n            IERC20(assetTwoAddress).balanceOf(address(this)) < resultAssetTwo\\n        ) {\\n            revert notEnoughTokens();\\n        }\\n        IERC20(assetOneAddress).transfer(msg.sender, resultAssetOne);\\n        IERC20(assetTwoAddress).transfer(msg.sender, resultAssetTwo);\\n\\n        // EMIT EVENT\\n        emit liquidityRemoved(msg.sender, resultAssetOne, resultAssetTwo);\\n    }\\n\\n    /**\\n     * @dev Function to sell the first asset and receive the second asset.\\n     * @param _amount The amount of the first asset to sell.\\n     */\\n    function sellAssetOne(uint256 _amount) external payable noReentrancy returns (uint256) {\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetTwo();\\n        uint256 assetOne = getAssetOne() + _amount;\\n        uint256 assetTwo = liquidity / assetOne;\\n        uint256 result = n - assetTwo;\\n        //SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetOneAddress).transferFrom(msg.sender, address(this), _amount);\\n        IERC20(assetTwoAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n        // Returns the amount of token\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Function to sell the second asset and receive the first asset.\\n     * @param _amount The amount of the second asset to sell.\\n     */\\n    function sellAssetTwo(uint256 _amount) external payable noReentrancy returns (uint256) {\\n        //PAY THE ETH FEE\\n        if (msg.value < swapFee) {\\n            revert notEnoughGas();\\n        }\\n        yield += swapFee;\\n        uint256 unrequiredFee = msg.value - swapFee; // In case the msg.sender sent more value than it is required\\n        //CALCULATION\\n        uint256 n = getAssetOne();\\n        uint256 assetTwo = getAssetTwo() + _amount;\\n        uint256 assetOne = liquidity / assetTwo;\\n        uint256 result = n - assetOne;\\n        //GETTING THE ASSET FROM CALLER TO THE LIQUIDITY POOL AND SENDING THE OPPOSITE ASSET TO THE CALLER FROM LIQUIDITY POOL\\n        IERC20(assetTwoAddress).transferFrom(msg.sender, address(this), _amount);\\n        IERC20(assetOneAddress).transfer(msg.sender, result);\\n        (bool sent, ) = payable(msg.sender).call{value: unrequiredFee}(\\\"\\\");\\n        require(sent, \\\"Failed to send Ether\\\");\\n        //EVENTS\\n        emit priceChanged(assetOneAddress, assetOnePrice());\\n        emit priceChanged(assetTwoAddress, assetTwoPrice());\\n        //Returns amount of token\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Function to get the current balance of a given asset held by the contract.\\n     * @param _address The address of the asset.\\n     * @return The current balance of the asset.\\n     */\\n    function getAssetBalace(address _address) public view returns (uint256) {\\n        return IERC20(_address).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the first asset in terms of the second asset.\\n     * @return The current price of the first asset * 10**18.\\n     */\\n    function assetOnePrice() public view returns (uint256) {\\n        return (getAssetTwo() * 1 ether) / getAssetOne();\\n    }\\n\\n    /**\\n     * @dev Function to get the current price of the second asset in terms of the first asset.\\n     * @return The current price of the second asset * 10**18.\\n     */\\n    function assetTwoPrice() public view returns (uint256) {\\n        return (getAssetOne() * 1 ether) / getAssetTwo();\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the first asset held by the contract.\\n     * @return The current balance of the first asset.\\n     */\\n    function getAssetOne() public view returns (uint256) {\\n        return IERC20(assetOneAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the amount of the second asset held by the contract.\\n     * @return The current balance of the second asset.\\n     */\\n    function getAssetTwo() public view returns (uint256) {\\n        return IERC20(assetTwoAddress).balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of LP tokens owned by a specific address.\\n     * @param _address The address of the LP token holder.\\n     * @return The quantity of LP tokens owned by the address.\\n     */\\n    function getLpTokenQuantity(address _address) public view returns (uint256) {\\n        if (msg.sender != owner && _address == msg.sender) {\\n            revert addressNotCorrect();\\n        }\\n        return lpTokenQuantity[_address];\\n    }\\n\\n    /**\\n     * @dev Function to get the total liquidity in the pool.\\n     * @return The total liquidity in the pool.\\n     */\\n    function getLiquidity() public view returns (uint256) {\\n        return liquidity;\\n    }\\n\\n    /**\\n     * @dev Function to get the current swap fee percentage.\\n     * @return The current swap fee percentage.\\n     */\\n    function getSwapFee() public view returns (uint256) {\\n        return swapFee;\\n    }\\n\\n    /**\\n     * @dev Function to get the current ETH balance of the contract.\\n     * @return The current ETH balance of the contract.\\n     */\\n    function addressBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @dev Function to get the quantity of the second asset that would be returned for a given amount of the first asset.\\n     * @param sellingAsset The address of the asset being sold.\\n     * @param _amount The amount of the first asset being sold.\\n     * @return The quantity of the second asset that would be returned\\n     */\\n    function getSwapQuantity(address sellingAsset, uint256 _amount) public view returns (uint256) {\\n        if (sellingAsset == assetOneAddress) {\\n            uint256 newAssetOne = getAssetOne() + _amount;\\n            uint256 newAssetTwo = liquidity / newAssetOne;\\n            return getAssetTwo() - newAssetTwo;\\n        } else if (sellingAsset == assetTwoAddress) {\\n            uint256 newAssetTwo = getAssetTwo() + _amount;\\n            uint256 newAssetOne = liquidity / newAssetTwo;\\n            return getAssetOne() - newAssetOne;\\n        } else {\\n            revert assetNotCorrect();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to get the second part of the liquidity token pair needed for providing liquidity.\\n     * @param _asset The address of the asset.\\n     * @param _amount The amount of the asset.\\n     * @return The quantity of the second asset needed for providing liquidity.\\n     */\\n    function amountOfOppositeTokenNeeded(\\n        address _asset,\\n        uint256 _amount\\n    ) public view returns (uint256) {\\n        uint256 ratio;\\n        if (_asset == assetOneAddress) {\\n            ratio = (getAssetTwo() * 1 ether) / getAssetOne();\\n        } else {\\n            ratio = (getAssetOne() * 1 ether) / getAssetTwo();\\n        }\\n        uint256 amountNeeded = (_amount * ratio) / 1 ether;\\n        return amountNeeded;\\n    }\\n\\n    /////////////////////////////////////////////////////////////////\\n    // Yield Farming and Time Locks\\n\\n    // Daily yield tracking\\n    mapping(address => uint256) public yieldTaken;\\n\\n    /**\\n     * @dev Function to get the current yield amount available in the pool.\\n     * @return The current yield amount.\\n     */\\n    function yieldAmount() public view returns (uint256) {\\n        return yield;\\n    }\\n\\n    /**\\n     * @dev Function to allow users to claim their yield. Can be called once a day.\\n     */\\n    function getYield() public {\\n        if (isTime() == false) {\\n            revert notEnoughTimePassed();\\n        }\\n        lastYieldFarmedTime[msg.sender] = block.timestamp; // Reentrancy guard\\n        uint256 yieldSoFar = yieldTaken[msg.sender];\\n        uint256 userLiquidity = (lpTokenQuantity[msg.sender] * 100) / liquidity;\\n        uint256 availableYield = ((yield - ((yieldSoFar * 100) / userLiquidity)) * userLiquidity) /\\n            100;\\n        if (availableYield > address(this).balance) {\\n            revert notEnoughTokens(); // IN CASE THERE IS A LOT OF PEOPLE GETTING YIELD AT ONCE AND RATIOS GET CHANGED TOO MUCH\\n        }\\n        yieldTaken[msg.sender] += availableYield;\\n        payable(msg.sender).transfer(availableYield);\\n\\n        // EMIT EVENT\\n        emit yieldFarmed(msg.sender, availableYield);\\n    }\\n\\n    // Timestamp mapping for yield farming\\n    mapping(address => uint256) public lastYieldFarmedTime;\\n    mapping(address => uint256) public initialLiquidityProvidedTime;\\n\\n    /**\\n     * @dev Function to check if enough time has passed for the user to claim yield.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTime() public view returns (bool) {\\n        lastYieldFarmedTime[msg.sender];\\n        uint256 currentStamp = block.timestamp;\\n        if ((lastYieldFarmedTime[msg.sender] + 1 days) < currentStamp) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Function to check if enough time has passed since the initial liquidity was provided.\\n     * @return Whether enough time has passed or not.\\n     */\\n    function isTimeInitialLiquidity() public view returns (bool) {\\n        if (block.timestamp > (initialLiquidityProvidedTime[msg.sender] + 365 days)) {\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Fallback function if address calls unexisting function, but contains msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    fallback() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n\\n    /**\\n     * @dev Receive function if address calls unexisting function, without msg.data\\n     * @notice The transaction gets reverted since the contract doesn't have the infrastructure to process it\\n     */\\n    receive() external payable {\\n        revert needToCallExistingFunction();\\n    }\\n}\\n\",\"keccak256\":\"0x67cd6d795c0f3c972a6a78fc0297ca0f34bdc342f217fb037581a84b67b08f04\",\"license\":\"MIT\"},\"contracts/PoolTracker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.9;\\n\\n// Importing necessary contracts and interfaces\\nimport \\\"./LiquidityPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Custom error definitions for specific failure conditions\\nerror PoolTracker_pairAlreadyExists();\\nerror PoolTracker_cantSwapSameToken();\\n\\n/**\\n * @title PoolTracker\\n * @dev Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem.\\n * Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions.\\n * Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.\\n */\\ncontract PoolTracker {\\n    // Tracker for created pools, will add to database\\n    event poolCreated(LiquidityPool pool, address assetOne, address assetTwo);\\n\\n    // The owner of the PoolTracker contract, set to the deployer.\\n    address private owner;\\n\\n    // Reentrancy Guard\\n    bool internal locked;\\n\\n    // Constructor: Sets the contract deployer as the owner.\\n    constructor() {\\n        owner = msg.sender;\\n    }\\n\\n    /**\\n     * @dev Modifier to prevent reentrancy attacks.\\n     */\\n    modifier noReentrancy() {\\n        require(!locked, \\\"No re-entrancy\\\");\\n        locked = true;\\n        _;\\n        locked = false;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (msg.sender != owner) {\\n            revert();\\n        }\\n        _;\\n    }\\n\\n    // Mapping of pool Pairs, to store existing ones\\n    mapping(address => address[]) public poolPairs;\\n\\n    // Mapping a pool to the contracts, in case we wont store it in the database\\n    mapping(address => mapping(address => LiquidityPool)) public pairToPool;\\n\\n    // All the available tokens\\n    address[] public tokens;\\n\\n    // All pools\\n    address[] public pools;\\n\\n    /**\\n     * @dev Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial\\n     * transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings.\\n     * Emits a PoolCreated event upon successful creation.\\n     *\\n     * Requirements:\\n     * - The token pair must not already have an existing pool.\\n     * - The caller must have approved the contract to spend the necessary token amounts.\\n     *\\n     * @param _assetOneAddress The address of the first token in the pair.\\n     * @param _assetTwoAddress The address of the second token in the pair.\\n     * @param amountOne The amount of the first token to add to the pool.\\n     * @param amountTwo The amount of the second token to add to the pool.\\n     */\\n    function createPool(\\n        address _assetOneAddress,\\n        address _assetTwoAddress,\\n        uint256 amountOne,\\n        uint256 amountTwo\\n    ) external noReentrancy {\\n        if (exists(_assetOneAddress, _assetTwoAddress)) // To prevent duplicate pools\\n        {\\n            revert PoolTracker_pairAlreadyExists();\\n        }\\n        // Transfer of tokens\\n        IERC20(_assetOneAddress).transferFrom(msg.sender, address(this), amountOne);\\n        IERC20(_assetTwoAddress).transferFrom(msg.sender, address(this), amountTwo);\\n        // Creation of pool\\n        LiquidityPool poolAddress = new LiquidityPool(_assetOneAddress, _assetTwoAddress);\\n        pools.push(address(poolAddress));\\n        // Approve\\n        IERC20(_assetOneAddress).approve(address(poolAddress), amountOne);\\n        IERC20(_assetTwoAddress).approve(address(poolAddress), amountTwo);\\n        // Add initial liquidity\\n        poolAddress.addInitialLiquidity(amountOne, amountTwo);\\n        // Update mappings\\n        poolPairs[_assetOneAddress].push(_assetTwoAddress);\\n        poolPairs[_assetTwoAddress].push(_assetOneAddress);\\n        pairToPool[_assetOneAddress][_assetTwoAddress] = poolAddress;\\n        pairToPool[_assetTwoAddress][_assetOneAddress] = poolAddress;\\n\\n        if (tokenExists(_assetOneAddress) == false) {\\n            tokens.push(_assetOneAddress);\\n        }\\n        if (tokenExists(_assetTwoAddress) == false) {\\n            tokens.push(_assetTwoAddress);\\n        }\\n        // Emit the event\\n        emit poolCreated(poolAddress, _assetOneAddress, _assetTwoAddress);\\n    }\\n\\n    /**\\n     * @dev Checks if a liquidity pool exists for a given pair of tokens.\\n     *\\n     * @param token1 The address of the first token.\\n     * @param token2 The address of the second token.\\n     * @return bool Returns true if the pool exists, false otherwise.\\n     */\\n    function exists(address token1, address token2) public view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < poolPairs[token1].length; i++) {\\n            if (poolPairs[token1][i] == token2) {\\n                exist = true;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    /**\\n     * @dev Checks if a token is already tracked by the contract.\\n     *\\n     * @param tokenAddress The address of the token to check.\\n     * @return bool Returns true if the token is tracked, false otherwise.\\n     */\\n    function tokenExists(address tokenAddress) internal view returns (bool) {\\n        bool exist;\\n        for (uint256 i; i < tokens.length; i++) {\\n            if (tokenAddress == tokens[i]) {\\n                exist = true;\\n                break;\\n            }\\n        }\\n        return exist;\\n    }\\n\\n    // Routing token\\n    struct routingAddress {\\n        address tokenAddress;\\n        address priceFeed;\\n    }\\n\\n    // Array of routing Tokens\\n    routingAddress[] public routingAddresses;\\n\\n    /**\\n     * @dev Allows the contract owner to add or update the routing address for a token.\\n     * This is used for token swaps and price feed lookups.\\n     *\\n     * @param tokenAddress The token for which to set the routing.\\n     * @param priceFeed The Chainlink price feed address for the token.\\n     */\\n    function addRoutingAddress(address tokenAddress, address priceFeed) external onlyOwner {\\n        if (routingAddresses.length == 0) {\\n            routingAddresses.push(routingAddress(tokenAddress, priceFeed));\\n        } else {\\n            for (uint256 i = 0; i < routingAddresses.length; i++) {\\n                if (routingAddresses[i].tokenAddress == tokenAddress) {\\n                    routingAddresses[i] = routingAddress(tokenAddress, priceFeed);\\n                    break;\\n                } else if (i == routingAddresses.length - 1) {\\n                    routingAddresses.push(routingAddress(tokenAddress, priceFeed));\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns all array of all tradable tokens on the platform\\n     *\\n     * @return array Returns tokens array.\\n     */\\n    function tokenList() external view returns (address[] memory) {\\n        return tokens;\\n    }\\n\\n    /**\\n     * @dev Returns length or routingAddresses array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getRoutingAddressesLength() external view returns (uint256) {\\n        return routingAddresses.length;\\n    }\\n\\n    /**\\n     * @dev Returns length or poolPairs array\\n     *\\n     * @return uint256 Returns length.\\n     */\\n    function getPoolPairsLength(address tokenAddress) external view returns (uint256) {\\n        return poolPairs[tokenAddress].length;\\n    }\\n\\n    function getPoolPairs(address tokenAddress) public view returns (address[] memory) {\\n        return poolPairs[tokenAddress];\\n    }\\n\\n    /**\\n     * @dev Retrieve pool addresses\\n     *\\n     * @return array Returns pools array\\n     */\\n    function getPools() public view returns (address[] memory) {\\n        return pools;\\n    }\\n}\\n\",\"keccak256\":\"0x51c1f7a99d6ad3c468e815cf322a146bf814839b89f041a25ff468b79f3452a0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550614ab8806100606000396000f3fe60806040523480156200001157600080fd5b5060043610620000e25760003560e01c80638b273a68116200009957806394123060116200006f57806394123060146200028e5780639e2c58ca14620002b0578063ac4afa3814620002d2578063f5ff5061146200030857620000e2565b80638b273a6814620001eb5780638c75d89d1462000221578063930186f2146200025757620000e2565b80631b9db73f14620000e75780634f64b2be146200011d578063673a2a1f14620001535780636fbe6fea14620001755780637663f8221462000195578063884db06314620001cb575b600080fd5b620001056004803603810190620000ff9190620015b1565b6200033e565b604051620001149190620016b1565b60405180910390f35b6200013b600480360381019062000135919062001710565b6200040d565b6040516200014a919062001753565b60405180910390f35b6200015d6200044d565b6040516200016c9190620016b1565b60405180910390f35b6200019360048036038101906200018d919062001770565b620004dd565b005b620001b36004803603810190620001ad919062001770565b62000907565b604051620001c29190620017d4565b60405180910390f35b620001e96004803603810190620001e39190620017f1565b62000a31565b005b62000209600480360381019062000203919062001770565b62001256565b604051620002189190620018ce565b60405180910390f35b6200023f6004803603810190620002399190620018eb565b62001298565b6040516200024e919062001753565b60405180910390f35b6200027560048036038101906200026f919062001710565b620012e7565b6040516200028592919062001932565b60405180910390f35b620002986200135c565b604051620002a7919062001970565b60405180910390f35b620002ba62001369565b604051620002c99190620016b1565b60405180910390f35b620002f06004803603810190620002ea919062001710565b620013f9565b604051620002ff919062001753565b60405180910390f35b620003266004803603810190620003209190620015b1565b62001439565b60405162000335919062001970565b60405180910390f35b6060600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200040157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620003b6575b50505050509050919050565b600381815481106200041e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606004805480602002602001604051908101604052809291908181526020018280548015620004d357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000488575b5050505050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200053657600080fd5b600060058054905014156200064757600560405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000903565b60005b60058054905081101562000901578273ffffffffffffffffffffffffffffffffffffffff16600582815481106200068657620006856200198d565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620007d25760405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815250600582815481106200072d576200072c6200198d565b5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505062000901565b6001600580549050620007e69190620019eb565b811415620008eb57600560405180604001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505b8080620008f89062001a26565b9150506200064a565b505b5050565b60008060005b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101562000a26578373ffffffffffffffffffffffffffffffffffffffff16600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110620009c357620009c26200198d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000a1057600191505b808062000a1d9062001a26565b9150506200090d565b508091505092915050565b600060149054906101000a900460ff161562000a84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a7b9062001ad5565b60405180910390fd5b6001600060146101000a81548160ff02191690831515021790555062000aab848462000907565b1562000ae3576040517f2f5f48b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040162000b229392919062001af7565b602060405180830381600087803b15801562000b3d57600080fd5b505af115801562000b52573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b78919062001b65565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040162000bb89392919062001af7565b602060405180830381600087803b15801562000bd357600080fd5b505af115801562000be8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c0e919062001b65565b506000848460405162000c219062001539565b62000c2e92919062001932565b604051809103906000f08015801562000c4b573d6000803e3d6000fd5b5090506004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b382856040518363ffffffff1660e01b815260040162000cee92919062001b97565b602060405180830381600087803b15801562000d0957600080fd5b505af115801562000d1e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d44919062001b65565b508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b382846040518363ffffffff1660e01b815260040162000d8292919062001b97565b602060405180830381600087803b15801562000d9d57600080fd5b505af115801562000db2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dd8919062001b65565b508073ffffffffffffffffffffffffffffffffffffffff1663a40f4fa184846040518363ffffffff1660e01b815260040162000e1692919062001bc4565b600060405180830381600087803b15801562000e3157600080fd5b505af115801562000e46573d6000803e3d6000fd5b50505050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600015156200110f8662001485565b151514156200117c576003859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600015156200118b8562001485565b15151415620011f8576003849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f1bfa76d353829689440900638fb4e4d604519997726fa1ee0f885e3df12ed7f88186866040516200122d9392919062001bf1565b60405180910390a15060008060146101000a81548160ff02191690831515021790555050505050565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528160005260406000208181548110620012b557600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058181548110620012f857600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b6000600580549050905090565b60606003805480602002602001604051908101604052809291908181526020018280548015620013ef57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620013a4575b5050505050905090565b600481815481106200140a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b60008060005b6003805490508110156200152f5760038181548110620014b057620014af6200198d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156200151957600191506200152f565b8080620015269062001a26565b9150506200148b565b5080915050919050565b612e548062001c2f83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062001579826200154c565b9050919050565b6200158b816200156c565b81146200159757600080fd5b50565b600081359050620015ab8162001580565b92915050565b600060208284031215620015ca57620015c962001547565b5b6000620015da848285016200159a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200161a816200156c565b82525050565b60006200162e83836200160f565b60208301905092915050565b6000602082019050919050565b60006200165482620015e3565b620016608185620015ee565b93506200166d83620015ff565b8060005b83811015620016a457815162001688888262001620565b975062001695836200163a565b92505060018101905062001671565b5085935050505092915050565b60006020820190508181036000830152620016cd818462001647565b905092915050565b6000819050919050565b620016ea81620016d5565b8114620016f657600080fd5b50565b6000813590506200170a81620016df565b92915050565b60006020828403121562001729576200172862001547565b5b60006200173984828501620016f9565b91505092915050565b6200174d816200156c565b82525050565b60006020820190506200176a600083018462001742565b92915050565b600080604083850312156200178a576200178962001547565b5b60006200179a858286016200159a565b9250506020620017ad858286016200159a565b9150509250929050565b60008115159050919050565b620017ce81620017b7565b82525050565b6000602082019050620017eb6000830184620017c3565b92915050565b600080600080608085870312156200180e576200180d62001547565b5b60006200181e878288016200159a565b945050602062001831878288016200159a565b93505060406200184487828801620016f9565b92505060606200185787828801620016f9565b91505092959194509250565b6000819050919050565b60006200188e6200188862001882846200154c565b62001863565b6200154c565b9050919050565b6000620018a2826200186d565b9050919050565b6000620018b68262001895565b9050919050565b620018c881620018a9565b82525050565b6000602082019050620018e56000830184620018bd565b92915050565b6000806040838503121562001905576200190462001547565b5b600062001915858286016200159a565b92505060206200192885828601620016f9565b9150509250929050565b600060408201905062001949600083018562001742565b62001958602083018462001742565b9392505050565b6200196a81620016d5565b82525050565b60006020820190506200198760008301846200195f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620019f882620016d5565b915062001a0583620016d5565b92508282101562001a1b5762001a1a620019bc565b5b828203905092915050565b600062001a3382620016d5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562001a695762001a68620019bc565b5b600182019050919050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b600062001abd600e8362001a74565b915062001aca8262001a85565b602082019050919050565b6000602082019050818103600083015262001af08162001aae565b9050919050565b600060608201905062001b0e600083018662001742565b62001b1d602083018562001742565b62001b2c60408301846200195f565b949350505050565b62001b3f81620017b7565b811462001b4b57600080fd5b50565b60008151905062001b5f8162001b34565b92915050565b60006020828403121562001b7e5762001b7d62001547565b5b600062001b8e8482850162001b4e565b91505092915050565b600060408201905062001bae600083018562001742565b62001bbd60208301846200195f565b9392505050565b600060408201905062001bdb60008301856200195f565b62001bea60208301846200195f565b9392505050565b600060608201905062001c086000830186620018bd565b62001c17602083018562001742565b62001c26604083018462001742565b94935050505056fe60806040523480156200001157600080fd5b5060405162002e5438038062002e54833981810160405281019062000037919062000179565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555066038d7ea4c680006005819055505050620001c0565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001418262000114565b9050919050565b620001538162000134565b81146200015f57600080fd5b50565b600081519050620001738162000148565b92915050565b600080604083850312156200019357620001926200010f565b5b6000620001a38582860162000162565b9250506020620001b68582860162000162565b9150509250929050565b612c8480620001d06000396000f3fe6080604052600436106101e75760003560e01c80638da5cb5b11610102578063aa03f2ed11610095578063e35ba8ab11610064578063e35ba8ab14610772578063e4a767261461079d578063f318e557146107c6578063ffebfc8c146107f15761021e565b8063aa03f2ed146106c1578063ce5efee3146106ec578063d4cadf6814610717578063dc171624146107425761021e565b8063a04f6639116100d1578063a04f663914610617578063a40f4fa114610642578063a87548031461066b578063a97533b8146106965761021e565b80638da5cb5b1461054957806395cc4c5e146105745780639a61c36a146105b15780639c8f9f23146105ee5761021e565b806340702adc1161017a578063696c613111610149578063696c61311461048f5780637c262871146104b857806381bace7d146104cf5780638477a6341461050c5761021e565b806340702adc146103de5780634257dc4c146104095780634d2d757c1461043957806354cf2aeb146104645761021e565b806328593984116101b6578063285939841461030e57806328da1aef146103395780632d4ce66914610376578063405eae91146103b35761021e565b80630910a51014610250578063131a6f011461027b5780631a686502146102a657806324aabb92146102d15761021e565b3661021e576040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561025c57600080fd5b5061026561082e565b6040516102729190612651565b60405180910390f35b34801561028757600080fd5b50610290610838565b60405161029d9190612651565b60405180910390f35b3480156102b257600080fd5b506102bb6108ea565b6040516102c89190612651565b60405180910390f35b3480156102dd57600080fd5b506102f860048036038101906102f391906126cf565b6108f0565b6040516103059190612651565b60405180910390f35b34801561031a57600080fd5b50610323610908565b6040516103309190612651565b60405180910390f35b34801561034557600080fd5b50610360600480360381019061035b9190612728565b61090e565b60405161036d9190612651565b60405180910390f35b34801561038257600080fd5b5061039d600480360381019061039891906126cf565b610a7d565b6040516103aa9190612651565b60405180910390f35b3480156103bf57600080fd5b506103c8610b0f565b6040516103d59190612783565b60405180910390f35b3480156103ea57600080fd5b506103f3610bbe565b6040516104009190612651565b60405180910390f35b610423600480360381019061041e919061279e565b610bc4565b6040516104309190612651565b60405180910390f35b34801561044557600080fd5b5061044e610fd6565b60405161045b9190612783565b60405180910390f35b34801561047057600080fd5b5061047961103f565b6040516104869190612651565b60405180910390f35b34801561049b57600080fd5b506104b660048036038101906104b1919061279e565b611045565b005b3480156104c457600080fd5b506104cd61105d565b005b3480156104db57600080fd5b506104f660048036038101906104f191906126cf565b6112f2565b6040516105039190612651565b60405180910390f35b34801561051857600080fd5b50610533600480360381019061052e91906126cf565b6113fb565b6040516105409190612651565b60405180910390f35b34801561055557600080fd5b5061055e611413565b60405161056b91906127da565b60405180910390f35b34801561058057600080fd5b5061059b60048036038101906105969190612728565b611439565b6040516105a89190612651565b60405180910390f35b3480156105bd57600080fd5b506105d860048036038101906105d391906126cf565b611522565b6040516105e59190612651565b60405180910390f35b3480156105fa57600080fd5b506106156004803603810190610610919061279e565b61153a565b005b34801561062357600080fd5b5061062c611ae6565b6040516106399190612651565b60405180910390f35b34801561064e57600080fd5b50610669600480360381019061066491906127f5565b611af0565b005b34801561067757600080fd5b50610680611df5565b60405161068d91906127da565b60405180910390f35b3480156106a257600080fd5b506106ab611e1b565b6040516106b89190612651565b60405180910390f35b3480156106cd57600080fd5b506106d6611e4f565b6040516106e39190612651565b60405180910390f35b3480156106f857600080fd5b50610701611f00565b60405161070e91906127da565b60405180910390f35b34801561072357600080fd5b5061072c611f24565b6040516107399190612651565b60405180910390f35b61075c6004803603810190610757919061279e565b611f2e565b6040516107699190612651565b60405180910390f35b34801561077e57600080fd5b50610787612340565b6040516107949190612651565b60405180910390f35b3480156107a957600080fd5b506107c460048036038101906107bf9190612835565b612374565b005b3480156107d257600080fd5b506107db612618565b6040516107e89190612651565b60405180910390f35b3480156107fd57600080fd5b50610818600480360381019061081391906126cf565b612620565b6040516108259190612651565b60405180910390f35b6000600354905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161089591906127da565b60206040518083038186803b1580156108ad57600080fd5b505afa1580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e5919061289d565b905090565b60035481565b60076020528060005260406000206000915090505481565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109aa57600082610970611e4f565b61097a91906128f9565b905060008160035461098c919061297e565b905080610997610838565b6109a191906129af565b92505050610a77565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a4557600082610a0b610838565b610a1591906128f9565b9050600081600354610a27919061297e565b905080610a32611e4f565b610a3c91906129af565b92505050610a77565b6040517fd526485500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ab891906127da565b60206040518083038186803b158015610ad057600080fd5b505afa158015610ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b08919061289d565b9050919050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205060004290508062015180600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ba591906128f9565b1015610bb5576001915050610bbb565b60009150505b90565b60025481565b6000600660149054906101000a900460ff1615610c16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0d90612a40565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550600554341015610c6d576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460046000828254610c8191906128f9565b92505081905550600060055434610c9891906129af565b90506000610ca4610838565b9050600084610cb1611e4f565b610cbb91906128f9565b9050600081600354610ccd919061297e565b905060008184610cdd91906129af565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b8152600401610d3c93929190612a60565b602060405180830381600087803b158015610d5657600080fd5b505af1158015610d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8e9190612ac3565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610dec929190612af0565b602060405180830381600087803b158015610e0657600080fd5b505af1158015610e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3e9190612ac3565b5060003373ffffffffffffffffffffffffffffffffffffffff1686604051610e6590612b4a565b60006040518083038185875af1925050503d8060008114610ea2576040519150601f19603f3d011682016040523d82523d6000602084013e610ea7565b606091505b5050905080610eeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee290612bab565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f35611e1b565b604051610f43929190612af0565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f97612340565b604051610fa5929190612af0565b60405180910390a18196505050505050506000600660146101000a81548160ff021916908315150217905550919050565b60006301e13380600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461102791906128f9565b421115611037576001905061103c565b600090505b90565b60055481565b600660009054906101000a9050508060058190555050565b60001515611069610b0f565b151514156110a3576040517ffdbfe33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006003546064600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461117c9190612bcb565b611186919061297e565b905060006064828360648661119b9190612bcb565b6111a5919061297e565b6004546111b291906129af565b6111bc9190612bcb565b6111c6919061297e565b905047811115611202576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461125191906128f9565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561129e573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fbf630ce062dbeaeb6c23a21390208b25de2ac16fb8502eab6054a70d9e34b8ec826040516112e59190612651565b60405180910390a2505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561137d57503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156113b4576040517f2ffae41300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a6020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156114c457611498611e4f565b670de0b6b3a76400006114a9610838565b6114b39190612bcb565b6114bd919061297e565b90506114f4565b6114cc610838565b670de0b6b3a76400006114dd611e4f565b6114e79190612bcb565b6114f1919061297e565b90505b6000670de0b6b3a7640000828561150b9190612bcb565b611515919061297e565b9050809250505092915050565b60086020528060005260406000206000915090505481565b600660149054906101000a900460ff161561158a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158190612a40565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600354670de0b6b3a7640000836116029190612bcb565b61160c919061297e565b905060006064848361161e9190612bcb565b611628919061297e565b90506000670de0b6b3a764000061163d611e4f565b836116489190612bcb565b611652919061297e565b90506000670de0b6b3a7640000611667610838565b846116729190612bcb565b61167c919061297e565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156116e65750600015156116e2610fd6565b1515145b8015611748575060025481836116fc9190612bcb565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461174691906129af565b105b1561177f576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117d991906127da565b60206040518083038186803b1580156117f157600080fd5b505afa158015611805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611829919061289d565b10806118de575080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161188c91906127da565b60206040518083038186803b1580156118a457600080fd5b505afa1580156118b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118dc919061289d565b105b15611915576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611970929190612af0565b602060405180830381600087803b15801561198a57600080fd5b505af115801561199e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c29190612ac3565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611a20929190612af0565b602060405180830381600087803b158015611a3a57600080fd5b505af1158015611a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a729190612ac3565b503373ffffffffffffffffffffffffffffffffffffffff167fbad053f5b243c76f17611a28d4554167bd09e3491be13032dd4af620e8e228728383604051611abb929190612c25565b60405180910390a250505050506000600660146101000a81548160ff02191690831515021790555050565b6000600454905090565b600660009054906101000a9050506000600a6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611b9a576040517f17ebf42200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611c3b93929190612a60565b602060405180830381600087803b158015611c5557600080fd5b505af1158015611c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8d9190612ac3565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611ced93929190612a60565b602060405180830381600087803b158015611d0757600080fd5b505af1158015611d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3f9190612ac3565b508082611d4c9190612bcb565b600281905550600254600381905550600254600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6148383604051611de9929190612c25565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611e25611e4f565b670de0b6b3a7640000611e36610838565b611e409190612bcb565b611e4a919061297e565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611eab91906127da565b60206040518083038186803b158015611ec357600080fd5b505afa158015611ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efb919061289d565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554905090565b6000600660149054906101000a900460ff1615611f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7790612a40565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550600554341015611fd7576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460046000828254611feb91906128f9565b9250508190555060006005543461200291906129af565b9050600061200e611e4f565b905060008461201b610838565b61202591906128f9565b9050600081600354612037919061297e565b90506000818461204791906129af565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b81526004016120a893929190612a60565b602060405180830381600087803b1580156120c257600080fd5b505af11580156120d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fa9190612ac3565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401612156929190612af0565b602060405180830381600087803b15801561217057600080fd5b505af1158015612184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a89190612ac3565b5060003373ffffffffffffffffffffffffffffffffffffffff16866040516121cf90612b4a565b60006040518083038185875af1925050503d806000811461220c576040519150601f19603f3d011682016040523d82523d6000602084013e612211565b606091505b5050905080612255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224c90612bab565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661229f611e1b565b6040516122ad929190612af0565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612301612340565b60405161230f929190612af0565b60405180910390a18196505050505050506000600660146101000a81548160ff021916908315150217905550919050565b600061234a610838565b670de0b6b3a764000061235b611e4f565b6123659190612bcb565b61236f919061297e565b905090565b600660149054906101000a900460ff16156123c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bb90612a40565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166323b872dd33306124078786611439565b6040518463ffffffff1660e01b815260040161242593929190612a60565b602060405180830381600087803b15801561243f57600080fd5b505af1158015612453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124779190612ac3565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016124b593929190612a60565b602060405180830381600087803b1580156124cf57600080fd5b505af11580156124e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125079190612ac3565b506125128382611439565b8161251d9190612bcb565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461256b91906128f9565b9250508190555061257c8382611439565b816125879190612bcb565b6003600082825461259891906128f9565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6146125e18584611439565b836040516125f0929190612c25565b60405180910390a26000600660146101000a81548160ff021916908315150217905550505050565b600047905090565b60096020528060005260406000206000915090505481565b6000819050919050565b61264b81612638565b82525050565b60006020820190506126666000830184612642565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061269c82612671565b9050919050565b6126ac81612691565b81146126b757600080fd5b50565b6000813590506126c9816126a3565b92915050565b6000602082840312156126e5576126e461266c565b5b60006126f3848285016126ba565b91505092915050565b61270581612638565b811461271057600080fd5b50565b600081359050612722816126fc565b92915050565b6000806040838503121561273f5761273e61266c565b5b600061274d858286016126ba565b925050602061275e85828601612713565b9150509250929050565b60008115159050919050565b61277d81612768565b82525050565b60006020820190506127986000830184612774565b92915050565b6000602082840312156127b4576127b361266c565b5b60006127c284828501612713565b91505092915050565b6127d481612691565b82525050565b60006020820190506127ef60008301846127cb565b92915050565b6000806040838503121561280c5761280b61266c565b5b600061281a85828601612713565b925050602061282b85828601612713565b9150509250929050565b60008060006060848603121561284e5761284d61266c565b5b600061285c868287016126ba565b935050602061286d868287016126ba565b925050604061287e86828701612713565b9150509250925092565b600081519050612897816126fc565b92915050565b6000602082840312156128b3576128b261266c565b5b60006128c184828501612888565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061290482612638565b915061290f83612638565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612944576129436128ca565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061298982612638565b915061299483612638565b9250826129a4576129a361294f565b5b828204905092915050565b60006129ba82612638565b91506129c583612638565b9250828210156129d8576129d76128ca565b5b828203905092915050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b6000612a2a600e836129e3565b9150612a35826129f4565b602082019050919050565b60006020820190508181036000830152612a5981612a1d565b9050919050565b6000606082019050612a7560008301866127cb565b612a8260208301856127cb565b612a8f6040830184612642565b949350505050565b612aa081612768565b8114612aab57600080fd5b50565b600081519050612abd81612a97565b92915050565b600060208284031215612ad957612ad861266c565b5b6000612ae784828501612aae565b91505092915050565b6000604082019050612b0560008301856127cb565b612b126020830184612642565b9392505050565b600081905092915050565b50565b6000612b34600083612b19565b9150612b3f82612b24565b600082019050919050565b6000612b5582612b27565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000612b956014836129e3565b9150612ba082612b5f565b602082019050919050565b60006020820190508181036000830152612bc481612b88565b9050919050565b6000612bd682612638565b9150612be183612638565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c1a57612c196128ca565b5b828202905092915050565b6000604082019050612c3a6000830185612642565b612c476020830184612642565b939250505056fea2646970667358221220b350b150652d4fbc6bea4f95a87823ae073e461c033c226212c871d3aca718c564736f6c63430008090033a26469706673582212204b547fb2b7d3b653c351f0902d462a954f9bfde8be1770dbb5af5432f6a9fe8564736f6c63430008090033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000e25760003560e01c80638b273a68116200009957806394123060116200006f57806394123060146200028e5780639e2c58ca14620002b0578063ac4afa3814620002d2578063f5ff5061146200030857620000e2565b80638b273a6814620001eb5780638c75d89d1462000221578063930186f2146200025757620000e2565b80631b9db73f14620000e75780634f64b2be146200011d578063673a2a1f14620001535780636fbe6fea14620001755780637663f8221462000195578063884db06314620001cb575b600080fd5b620001056004803603810190620000ff9190620015b1565b6200033e565b604051620001149190620016b1565b60405180910390f35b6200013b600480360381019062000135919062001710565b6200040d565b6040516200014a919062001753565b60405180910390f35b6200015d6200044d565b6040516200016c9190620016b1565b60405180910390f35b6200019360048036038101906200018d919062001770565b620004dd565b005b620001b36004803603810190620001ad919062001770565b62000907565b604051620001c29190620017d4565b60405180910390f35b620001e96004803603810190620001e39190620017f1565b62000a31565b005b62000209600480360381019062000203919062001770565b62001256565b604051620002189190620018ce565b60405180910390f35b6200023f6004803603810190620002399190620018eb565b62001298565b6040516200024e919062001753565b60405180910390f35b6200027560048036038101906200026f919062001710565b620012e7565b6040516200028592919062001932565b60405180910390f35b620002986200135c565b604051620002a7919062001970565b60405180910390f35b620002ba62001369565b604051620002c99190620016b1565b60405180910390f35b620002f06004803603810190620002ea919062001710565b620013f9565b604051620002ff919062001753565b60405180910390f35b620003266004803603810190620003209190620015b1565b62001439565b60405162000335919062001970565b60405180910390f35b6060600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156200040157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620003b6575b50505050509050919050565b600381815481106200041e57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606004805480602002602001604051908101604052809291908181526020018280548015620004d357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831162000488575b5050505050905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146200053657600080fd5b600060058054905014156200064757600560405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000903565b60005b60058054905081101562000901578273ffffffffffffffffffffffffffffffffffffffff16600582815481106200068657620006856200198d565b5b906000526020600020906002020160000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415620007d25760405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff16815250600582815481106200072d576200072c6200198d565b5b906000526020600020906002020160008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555090505062000901565b6001600580549050620007e69190620019eb565b811415620008eb57600560405180604001604052808573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff16815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505b8080620008f89062001a26565b9150506200064a565b505b5050565b60008060005b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905081101562000a26578373ffffffffffffffffffffffffffffffffffffffff16600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110620009c357620009c26200198d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000a1057600191505b808062000a1d9062001a26565b9150506200090d565b508091505092915050565b600060149054906101000a900460ff161562000a84576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000a7b9062001ad5565b60405180910390fd5b6001600060146101000a81548160ff02191690831515021790555062000aab848462000907565b1562000ae3576040517f2f5f48b800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040162000b229392919062001af7565b602060405180830381600087803b15801562000b3d57600080fd5b505af115801562000b52573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000b78919062001b65565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040162000bb89392919062001af7565b602060405180830381600087803b15801562000bd357600080fd5b505af115801562000be8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c0e919062001b65565b506000848460405162000c219062001539565b62000c2e92919062001932565b604051809103906000f08015801562000c4b573d6000803e3d6000fd5b5090506004819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b382856040518363ffffffff1660e01b815260040162000cee92919062001b97565b602060405180830381600087803b15801562000d0957600080fd5b505af115801562000d1e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d44919062001b65565b508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b382846040518363ffffffff1660e01b815260040162000d8292919062001b97565b602060405180830381600087803b15801562000d9d57600080fd5b505af115801562000db2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000dd8919062001b65565b508073ffffffffffffffffffffffffffffffffffffffff1663a40f4fa184846040518363ffffffff1660e01b815260040162000e1692919062001bc4565b600060405180830381600087803b15801562000e3157600080fd5b505af115801562000e46573d6000803e3d6000fd5b50505050600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600015156200110f8662001485565b151514156200117c576003859080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b600015156200118b8562001485565b15151415620011f8576003849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b7f1bfa76d353829689440900638fb4e4d604519997726fa1ee0f885e3df12ed7f88186866040516200122d9392919062001bf1565b60405180910390a15060008060146101000a81548160ff02191690831515021790555050505050565b60026020528160005260406000206020528060005260406000206000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528160005260406000208181548110620012b557600080fd5b906000526020600020016000915091509054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60058181548110620012f857600080fd5b90600052602060002090600202016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905082565b6000600580549050905090565b60606003805480602002602001604051908101604052809291908181526020018280548015620013ef57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620013a4575b5050505050905090565b600481815481106200140a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b60008060005b6003805490508110156200152f5760038181548110620014b057620014af6200198d565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156200151957600191506200152f565b8080620015269062001a26565b9150506200148b565b5080915050919050565b612e548062001c2f83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062001579826200154c565b9050919050565b6200158b816200156c565b81146200159757600080fd5b50565b600081359050620015ab8162001580565b92915050565b600060208284031215620015ca57620015c962001547565b5b6000620015da848285016200159a565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200161a816200156c565b82525050565b60006200162e83836200160f565b60208301905092915050565b6000602082019050919050565b60006200165482620015e3565b620016608185620015ee565b93506200166d83620015ff565b8060005b83811015620016a457815162001688888262001620565b975062001695836200163a565b92505060018101905062001671565b5085935050505092915050565b60006020820190508181036000830152620016cd818462001647565b905092915050565b6000819050919050565b620016ea81620016d5565b8114620016f657600080fd5b50565b6000813590506200170a81620016df565b92915050565b60006020828403121562001729576200172862001547565b5b60006200173984828501620016f9565b91505092915050565b6200174d816200156c565b82525050565b60006020820190506200176a600083018462001742565b92915050565b600080604083850312156200178a576200178962001547565b5b60006200179a858286016200159a565b9250506020620017ad858286016200159a565b9150509250929050565b60008115159050919050565b620017ce81620017b7565b82525050565b6000602082019050620017eb6000830184620017c3565b92915050565b600080600080608085870312156200180e576200180d62001547565b5b60006200181e878288016200159a565b945050602062001831878288016200159a565b93505060406200184487828801620016f9565b92505060606200185787828801620016f9565b91505092959194509250565b6000819050919050565b60006200188e6200188862001882846200154c565b62001863565b6200154c565b9050919050565b6000620018a2826200186d565b9050919050565b6000620018b68262001895565b9050919050565b620018c881620018a9565b82525050565b6000602082019050620018e56000830184620018bd565b92915050565b6000806040838503121562001905576200190462001547565b5b600062001915858286016200159a565b92505060206200192885828601620016f9565b9150509250929050565b600060408201905062001949600083018562001742565b62001958602083018462001742565b9392505050565b6200196a81620016d5565b82525050565b60006020820190506200198760008301846200195f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620019f882620016d5565b915062001a0583620016d5565b92508282101562001a1b5762001a1a620019bc565b5b828203905092915050565b600062001a3382620016d5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141562001a695762001a68620019bc565b5b600182019050919050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b600062001abd600e8362001a74565b915062001aca8262001a85565b602082019050919050565b6000602082019050818103600083015262001af08162001aae565b9050919050565b600060608201905062001b0e600083018662001742565b62001b1d602083018562001742565b62001b2c60408301846200195f565b949350505050565b62001b3f81620017b7565b811462001b4b57600080fd5b50565b60008151905062001b5f8162001b34565b92915050565b60006020828403121562001b7e5762001b7d62001547565b5b600062001b8e8482850162001b4e565b91505092915050565b600060408201905062001bae600083018562001742565b62001bbd60208301846200195f565b9392505050565b600060408201905062001bdb60008301856200195f565b62001bea60208301846200195f565b9392505050565b600060608201905062001c086000830186620018bd565b62001c17602083018562001742565b62001c26604083018462001742565b94935050505056fe60806040523480156200001157600080fd5b5060405162002e5438038062002e54833981810160405281019062000037919062000179565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555066038d7ea4c680006005819055505050620001c0565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001418262000114565b9050919050565b620001538162000134565b81146200015f57600080fd5b50565b600081519050620001738162000148565b92915050565b600080604083850312156200019357620001926200010f565b5b6000620001a38582860162000162565b9250506020620001b68582860162000162565b9150509250929050565b612c8480620001d06000396000f3fe6080604052600436106101e75760003560e01c80638da5cb5b11610102578063aa03f2ed11610095578063e35ba8ab11610064578063e35ba8ab14610772578063e4a767261461079d578063f318e557146107c6578063ffebfc8c146107f15761021e565b8063aa03f2ed146106c1578063ce5efee3146106ec578063d4cadf6814610717578063dc171624146107425761021e565b8063a04f6639116100d1578063a04f663914610617578063a40f4fa114610642578063a87548031461066b578063a97533b8146106965761021e565b80638da5cb5b1461054957806395cc4c5e146105745780639a61c36a146105b15780639c8f9f23146105ee5761021e565b806340702adc1161017a578063696c613111610149578063696c61311461048f5780637c262871146104b857806381bace7d146104cf5780638477a6341461050c5761021e565b806340702adc146103de5780634257dc4c146104095780634d2d757c1461043957806354cf2aeb146104645761021e565b806328593984116101b6578063285939841461030e57806328da1aef146103395780632d4ce66914610376578063405eae91146103b35761021e565b80630910a51014610250578063131a6f011461027b5780631a686502146102a657806324aabb92146102d15761021e565b3661021e576040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517fdfaf840900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34801561025c57600080fd5b5061026561082e565b6040516102729190612651565b60405180910390f35b34801561028757600080fd5b50610290610838565b60405161029d9190612651565b60405180910390f35b3480156102b257600080fd5b506102bb6108ea565b6040516102c89190612651565b60405180910390f35b3480156102dd57600080fd5b506102f860048036038101906102f391906126cf565b6108f0565b6040516103059190612651565b60405180910390f35b34801561031a57600080fd5b50610323610908565b6040516103309190612651565b60405180910390f35b34801561034557600080fd5b50610360600480360381019061035b9190612728565b61090e565b60405161036d9190612651565b60405180910390f35b34801561038257600080fd5b5061039d600480360381019061039891906126cf565b610a7d565b6040516103aa9190612651565b60405180910390f35b3480156103bf57600080fd5b506103c8610b0f565b6040516103d59190612783565b60405180910390f35b3480156103ea57600080fd5b506103f3610bbe565b6040516104009190612651565b60405180910390f35b610423600480360381019061041e919061279e565b610bc4565b6040516104309190612651565b60405180910390f35b34801561044557600080fd5b5061044e610fd6565b60405161045b9190612783565b60405180910390f35b34801561047057600080fd5b5061047961103f565b6040516104869190612651565b60405180910390f35b34801561049b57600080fd5b506104b660048036038101906104b1919061279e565b611045565b005b3480156104c457600080fd5b506104cd61105d565b005b3480156104db57600080fd5b506104f660048036038101906104f191906126cf565b6112f2565b6040516105039190612651565b60405180910390f35b34801561051857600080fd5b50610533600480360381019061052e91906126cf565b6113fb565b6040516105409190612651565b60405180910390f35b34801561055557600080fd5b5061055e611413565b60405161056b91906127da565b60405180910390f35b34801561058057600080fd5b5061059b60048036038101906105969190612728565b611439565b6040516105a89190612651565b60405180910390f35b3480156105bd57600080fd5b506105d860048036038101906105d391906126cf565b611522565b6040516105e59190612651565b60405180910390f35b3480156105fa57600080fd5b506106156004803603810190610610919061279e565b61153a565b005b34801561062357600080fd5b5061062c611ae6565b6040516106399190612651565b60405180910390f35b34801561064e57600080fd5b50610669600480360381019061066491906127f5565b611af0565b005b34801561067757600080fd5b50610680611df5565b60405161068d91906127da565b60405180910390f35b3480156106a257600080fd5b506106ab611e1b565b6040516106b89190612651565b60405180910390f35b3480156106cd57600080fd5b506106d6611e4f565b6040516106e39190612651565b60405180910390f35b3480156106f857600080fd5b50610701611f00565b60405161070e91906127da565b60405180910390f35b34801561072357600080fd5b5061072c611f24565b6040516107399190612651565b60405180910390f35b61075c6004803603810190610757919061279e565b611f2e565b6040516107699190612651565b60405180910390f35b34801561077e57600080fd5b50610787612340565b6040516107949190612651565b60405180910390f35b3480156107a957600080fd5b506107c460048036038101906107bf9190612835565b612374565b005b3480156107d257600080fd5b506107db612618565b6040516107e89190612651565b60405180910390f35b3480156107fd57600080fd5b50610818600480360381019061081391906126cf565b612620565b6040516108259190612651565b60405180910390f35b6000600354905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161089591906127da565b60206040518083038186803b1580156108ad57600080fd5b505afa1580156108c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e5919061289d565b905090565b60035481565b60076020528060005260406000206000915090505481565b60045481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109aa57600082610970611e4f565b61097a91906128f9565b905060008160035461098c919061297e565b905080610997610838565b6109a191906129af565b92505050610a77565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a4557600082610a0b610838565b610a1591906128f9565b9050600081600354610a27919061297e565b905080610a32611e4f565b610a3c91906129af565b92505050610a77565b6040517fd526485500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ab891906127da565b60206040518083038186803b158015610ad057600080fd5b505afa158015610ae4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b08919061289d565b9050919050565b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205060004290508062015180600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610ba591906128f9565b1015610bb5576001915050610bbb565b60009150505b90565b60025481565b6000600660149054906101000a900460ff1615610c16576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c0d90612a40565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550600554341015610c6d576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460046000828254610c8191906128f9565b92505081905550600060055434610c9891906129af565b90506000610ca4610838565b9050600084610cb1611e4f565b610cbb91906128f9565b9050600081600354610ccd919061297e565b905060008184610cdd91906129af565b905060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b8152600401610d3c93929190612a60565b602060405180830381600087803b158015610d5657600080fd5b505af1158015610d6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d8e9190612ac3565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610dec929190612af0565b602060405180830381600087803b158015610e0657600080fd5b505af1158015610e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e3e9190612ac3565b5060003373ffffffffffffffffffffffffffffffffffffffff1686604051610e6590612b4a565b60006040518083038185875af1925050503d8060008114610ea2576040519150601f19603f3d011682016040523d82523d6000602084013e610ea7565b606091505b5050905080610eeb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee290612bab565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f35611e1b565b604051610f43929190612af0565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610f97612340565b604051610fa5929190612af0565b60405180910390a18196505050505050506000600660146101000a81548160ff021916908315150217905550919050565b60006301e13380600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461102791906128f9565b421115611037576001905061103c565b600090505b90565b60055481565b600660009054906101000a9050508060058190555050565b60001515611069610b0f565b151514156110a3576040517ffdbfe33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006003546064600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461117c9190612bcb565b611186919061297e565b905060006064828360648661119b9190612bcb565b6111a5919061297e565b6004546111b291906129af565b6111bc9190612bcb565b6111c6919061297e565b905047811115611202576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461125191906128f9565b925050819055503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561129e573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167fbf630ce062dbeaeb6c23a21390208b25de2ac16fb8502eab6054a70d9e34b8ec826040516112e59190612651565b60405180910390a2505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415801561137d57503373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b156113b4576040517f2ffae41300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600760008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a6020528060005260406000206000915090505481565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156114c457611498611e4f565b670de0b6b3a76400006114a9610838565b6114b39190612bcb565b6114bd919061297e565b90506114f4565b6114cc610838565b670de0b6b3a76400006114dd611e4f565b6114e79190612bcb565b6114f1919061297e565b90505b6000670de0b6b3a7640000828561150b9190612bcb565b611515919061297e565b9050809250505092915050565b60086020528060005260406000206000915090505481565b600660149054906101000a900460ff161561158a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158190612a40565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055506000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600354670de0b6b3a7640000836116029190612bcb565b61160c919061297e565b905060006064848361161e9190612bcb565b611628919061297e565b90506000670de0b6b3a764000061163d611e4f565b836116489190612bcb565b611652919061297e565b90506000670de0b6b3a7640000611667610838565b846116729190612bcb565b61167c919061297e565b9050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480156116e65750600015156116e2610fd6565b1515145b8015611748575060025481836116fc9190612bcb565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461174691906129af565b105b1561177f576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016117d991906127da565b60206040518083038186803b1580156117f157600080fd5b505afa158015611805573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611829919061289d565b10806118de575080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161188c91906127da565b60206040518083038186803b1580156118a457600080fd5b505afa1580156118b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118dc919061289d565b105b15611915576040517fbf0ebd8400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611970929190612af0565b602060405180830381600087803b15801561198a57600080fd5b505af115801561199e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119c29190612ac3565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401611a20929190612af0565b602060405180830381600087803b158015611a3a57600080fd5b505af1158015611a4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a729190612ac3565b503373ffffffffffffffffffffffffffffffffffffffff167fbad053f5b243c76f17611a28d4554167bd09e3491be13032dd4af620e8e228728383604051611abb929190612c25565b60405180910390a250505050506000600660146101000a81548160ff02191690831515021790555050565b6000600454905090565b600660009054906101000a9050506000600a6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541115611b9a576040517f17ebf42200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b42600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401611c3b93929190612a60565b602060405180830381600087803b158015611c5557600080fd5b505af1158015611c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c8d9190612ac3565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611ced93929190612a60565b602060405180830381600087803b158015611d0757600080fd5b505af1158015611d1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3f9190612ac3565b508082611d4c9190612bcb565b600281905550600254600381905550600254600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6148383604051611de9929190612c25565b60405180910390a25050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000611e25611e4f565b670de0b6b3a7640000611e36610838565b611e409190612bcb565b611e4a919061297e565b905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611eab91906127da565b60206040518083038186803b158015611ec357600080fd5b505afa158015611ed7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611efb919061289d565b905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600554905090565b6000600660149054906101000a900460ff1615611f80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f7790612a40565b60405180910390fd5b6001600660146101000a81548160ff021916908315150217905550600554341015611fd7576040517fb08ede0900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460046000828254611feb91906128f9565b9250508190555060006005543461200291906129af565b9050600061200e611e4f565b905060008461201b610838565b61202591906128f9565b9050600081600354612037919061297e565b90506000818461204791906129af565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd33308a6040518463ffffffff1660e01b81526004016120a893929190612a60565b602060405180830381600087803b1580156120c257600080fd5b505af11580156120d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fa9190612ac3565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401612156929190612af0565b602060405180830381600087803b15801561217057600080fd5b505af1158015612184573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121a89190612ac3565b5060003373ffffffffffffffffffffffffffffffffffffffff16866040516121cf90612b4a565b60006040518083038185875af1925050503d806000811461220c576040519150601f19603f3d011682016040523d82523d6000602084013e612211565b606091505b5050905080612255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161224c90612bab565b60405180910390fd5b7f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab160008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1661229f611e1b565b6040516122ad929190612af0565b60405180910390a17f6f32bb515641ec539b66bf327d21765de8c4200f94d348cee1dc835bb7532ab1600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612301612340565b60405161230f929190612af0565b60405180910390a18196505050505050506000600660146101000a81548160ff021916908315150217905550919050565b600061234a610838565b670de0b6b3a764000061235b611e4f565b6123659190612bcb565b61236f919061297e565b905090565b600660149054906101000a900460ff16156123c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123bb90612a40565b60405180910390fd5b6001600660146101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166323b872dd33306124078786611439565b6040518463ffffffff1660e01b815260040161242593929190612a60565b602060405180830381600087803b15801561243f57600080fd5b505af1158015612453573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124779190612ac3565b508273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b81526004016124b593929190612a60565b602060405180830381600087803b1580156124cf57600080fd5b505af11580156124e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125079190612ac3565b506125128382611439565b8161251d9190612bcb565b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461256b91906128f9565b9250508190555061257c8382611439565b816125879190612bcb565b6003600082825461259891906128f9565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167fb27d7e2f60a2022903d49f653fbb6f06e4fd14fd5f2291655fb7c499645ba6146125e18584611439565b836040516125f0929190612c25565b60405180910390a26000600660146101000a81548160ff021916908315150217905550505050565b600047905090565b60096020528060005260406000206000915090505481565b6000819050919050565b61264b81612638565b82525050565b60006020820190506126666000830184612642565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061269c82612671565b9050919050565b6126ac81612691565b81146126b757600080fd5b50565b6000813590506126c9816126a3565b92915050565b6000602082840312156126e5576126e461266c565b5b60006126f3848285016126ba565b91505092915050565b61270581612638565b811461271057600080fd5b50565b600081359050612722816126fc565b92915050565b6000806040838503121561273f5761273e61266c565b5b600061274d858286016126ba565b925050602061275e85828601612713565b9150509250929050565b60008115159050919050565b61277d81612768565b82525050565b60006020820190506127986000830184612774565b92915050565b6000602082840312156127b4576127b361266c565b5b60006127c284828501612713565b91505092915050565b6127d481612691565b82525050565b60006020820190506127ef60008301846127cb565b92915050565b6000806040838503121561280c5761280b61266c565b5b600061281a85828601612713565b925050602061282b85828601612713565b9150509250929050565b60008060006060848603121561284e5761284d61266c565b5b600061285c868287016126ba565b935050602061286d868287016126ba565b925050604061287e86828701612713565b9150509250925092565b600081519050612897816126fc565b92915050565b6000602082840312156128b3576128b261266c565b5b60006128c184828501612888565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061290482612638565b915061290f83612638565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115612944576129436128ca565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061298982612638565b915061299483612638565b9250826129a4576129a361294f565b5b828204905092915050565b60006129ba82612638565b91506129c583612638565b9250828210156129d8576129d76128ca565b5b828203905092915050565b600082825260208201905092915050565b7f4e6f2072652d656e7472616e6379000000000000000000000000000000000000600082015250565b6000612a2a600e836129e3565b9150612a35826129f4565b602082019050919050565b60006020820190508181036000830152612a5981612a1d565b9050919050565b6000606082019050612a7560008301866127cb565b612a8260208301856127cb565b612a8f6040830184612642565b949350505050565b612aa081612768565b8114612aab57600080fd5b50565b600081519050612abd81612a97565b92915050565b600060208284031215612ad957612ad861266c565b5b6000612ae784828501612aae565b91505092915050565b6000604082019050612b0560008301856127cb565b612b126020830184612642565b9392505050565b600081905092915050565b50565b6000612b34600083612b19565b9150612b3f82612b24565b600082019050919050565b6000612b5582612b27565b9150819050919050565b7f4661696c656420746f2073656e64204574686572000000000000000000000000600082015250565b6000612b956014836129e3565b9150612ba082612b5f565b602082019050919050565b60006020820190508181036000830152612bc481612b88565b9050919050565b6000612bd682612638565b9150612be183612638565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c1a57612c196128ca565b5b828202905092915050565b6000604082019050612c3a6000830185612642565b612c476020830184612642565b939250505056fea2646970667358221220b350b150652d4fbc6bea4f95a87823ae073e461c033c226212c871d3aca718c564736f6c63430008090033a26469706673582212204b547fb2b7d3b653c351f0902d462a954f9bfde8be1770dbb5af5432f6a9fe8564736f6c63430008090033",
  "devdoc": {
    "details": "Manages the creation and tracking of liquidity pools within a decentralized finance ecosystem. Utilizes Chainlink for accurate price feeds and OpenZeppelin's ERC20 for token interactions. Implements reentrancy guards to mitigate potential security vulnerabilities in contract interactions.",
    "kind": "dev",
    "methods": {
      "addRoutingAddress(address,address)": {
        "details": "Allows the contract owner to add or update the routing address for a token. This is used for token swaps and price feed lookups.",
        "params": {
          "priceFeed": "The Chainlink price feed address for the token.",
          "tokenAddress": "The token for which to set the routing."
        }
      },
      "createPool(address,address,uint256,uint256)": {
        "details": "Creates a liquidity pool for a given pair of ERC20 tokens. This function handles the initial transfer of token amounts from the caller, sets up the liquidity pool, and updates internal mappings. Emits a PoolCreated event upon successful creation. Requirements: - The token pair must not already have an existing pool. - The caller must have approved the contract to spend the necessary token amounts.",
        "params": {
          "_assetOneAddress": "The address of the first token in the pair.",
          "_assetTwoAddress": "The address of the second token in the pair.",
          "amountOne": "The amount of the first token to add to the pool.",
          "amountTwo": "The amount of the second token to add to the pool."
        }
      },
      "exists(address,address)": {
        "details": "Checks if a liquidity pool exists for a given pair of tokens.",
        "params": {
          "token1": "The address of the first token.",
          "token2": "The address of the second token."
        },
        "returns": {
          "_0": "bool Returns true if the pool exists, false otherwise."
        }
      },
      "getPoolPairsLength(address)": {
        "details": "Returns length or poolPairs array",
        "returns": {
          "_0": "uint256 Returns length."
        }
      },
      "getPools()": {
        "details": "Retrieve pool addresses",
        "returns": {
          "_0": "array Returns pools array"
        }
      },
      "getRoutingAddressesLength()": {
        "details": "Returns length or routingAddresses array",
        "returns": {
          "_0": "uint256 Returns length."
        }
      },
      "tokenList()": {
        "details": "Returns all array of all tradable tokens on the platform",
        "returns": {
          "_0": "array Returns tokens array."
        }
      }
    },
    "title": "PoolTracker",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2248,
        "contract": "contracts/PoolTracker.sol:PoolTracker",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2250,
        "contract": "contracts/PoolTracker.sol:PoolTracker",
        "label": "locked",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2296,
        "contract": "contracts/PoolTracker.sol:PoolTracker",
        "label": "poolPairs",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 2303,
        "contract": "contracts/PoolTracker.sol:PoolTracker",
        "label": "pairToPool",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_contract(LiquidityPool)2227))"
      },
      {
        "astId": 2306,
        "contract": "contracts/PoolTracker.sol:PoolTracker",
        "label": "tokens",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2309,
        "contract": "contracts/PoolTracker.sol:PoolTracker",
        "label": "pools",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2559,
        "contract": "contracts/PoolTracker.sol:PoolTracker",
        "label": "routingAddresses",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_struct(routingAddress)2555_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(routingAddress)2555_storage)dyn_storage": {
        "base": "t_struct(routingAddress)2555_storage",
        "encoding": "dynamic_array",
        "label": "struct PoolTracker.routingAddress[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(LiquidityPool)2227": {
        "encoding": "inplace",
        "label": "contract LiquidityPool",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_contract(LiquidityPool)2227)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => contract LiquidityPool)",
        "numberOfBytes": "32",
        "value": "t_contract(LiquidityPool)2227"
      },
      "t_mapping(t_address,t_mapping(t_address,t_contract(LiquidityPool)2227))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => contract LiquidityPool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_contract(LiquidityPool)2227)"
      },
      "t_struct(routingAddress)2555_storage": {
        "encoding": "inplace",
        "label": "struct PoolTracker.routingAddress",
        "members": [
          {
            "astId": 2552,
            "contract": "contracts/PoolTracker.sol:PoolTracker",
            "label": "tokenAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2554,
            "contract": "contracts/PoolTracker.sol:PoolTracker",
            "label": "priceFeed",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "64"
      }
    }
  }
}